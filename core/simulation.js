// core/simulation.js
import {draw, startAnimation, stopAnimation} from "../ui/simulation/renderer.js";

function calculateDayFromDate(dateString) {
    const targetDate = new Date(dateString);
    const baseDate = new Date('2022-01-03');
    const diffTime = targetDate.getTime() - baseDate.getTime();
    const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
    return diffDays;
}


window.simulation = {
    simulationMinutesPerStep: 1,
    isRunning: false,
    currentTimeMinutes: calculateDayFromDate('2022-01-03') * 24 * 60,
    intervalMs: 1000,
    timer: null,
    auftraegeQueue: [],
    activeTasks: [],
    maschinenStatus: {},
    auftraege: [],
    maschinen: [],
    arbeitsplaene: [],
    recentActivities: [],
    startTime: null,
    auftraegeStatus: {},
    statistics: {
        completedTasks: 0,
        totalProcessingTime: 0,
        machineUtilization: {},
        // –ù–û–í–´–ï –ø–æ–ª—è –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        orderStatistics: {}, // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–∂–¥–æ–º—É –∑–∞–∫–∞–∑—É
        machineIdleTime: {}, // –í—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è –∫–∞–∂–¥–æ–π –º–∞—à–∏–Ω—ã
        bufferStatistics: {}, // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É—Ñ–µ—Ä–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤
        totalSimulationTime: 0,
        systemStartTime: null
    }
};

function setSimulationStartDate(dateString) {
    const dayNumber = calculateDayFromDate(dateString);
    window.simulation.currentTimeMinutes = dayNumber * 24 * 60;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async function loadInitialData() {
    try {

        // –ï—Å–ª–∏ —ç—Ç–æ Electron –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º IPC –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        if (window.electronAPI) {
            window.simulation.auftraege = await window.electronAPI.getAuftraege();
            window.simulation.maschinen = await window.electronAPI.getMaschinen();
            window.simulation.arbeitsplaene = await window.electronAPI.getArbeitsplaene();
        } else {
            // –î–ª—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fetch API
            try {
                const [auftraegeRes, maschinenRes, arbeitsplaeneRes] = await Promise.all([
                    fetch('/api/auftraege'),
                    fetch('/api/maschinen'),
                    fetch('/api/arbeitsplaene')
                ]);

                window.simulation.auftraege = await auftraegeRes.json();
                window.simulation.maschinen = await maschinenRes.json();
                window.simulation.arbeitsplaene = await arbeitsplaeneRes.json();
            } catch (fetchError) {
                loadTestData();
                return;
            }
        }
        console.log("üìã √úberpr√ºfung der geladenen Daten:");
        console.log(`- Auftr√§ge: ${window.simulation.auftraege.length}`);
        console.log(`- Maschinen: ${window.simulation.maschinen.length}`);
        console.log(`- Arbeitspl√§ne: ${window.simulation.arbeitsplaene.length}`);


        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—à–∏–Ω
        initMaschinen(window.simulation.maschinen);

        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Ç–µ–∫—É—â–µ–º—É –¥–Ω—é (–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã)
        filterAndLoadActiveAuftraege();

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
        initAuftraegeStatus();

        addActivity(`Es wurden ${window.simulation.auftraege.length} Auftr√§ge und ${window.simulation.maschinen.length} Maschinen geladen`);

    } catch (error) {
        console.error("‚ùå Fehler beim Laden der Daten:", error);
        addActivity("Fehler beim Laden der Daten, Testdaten werden verwendet");
        loadTestData();
    }
}

function addActivity(message) {
    const timestamp = new Date().toLocaleTimeString();
    window.simulation.recentActivities.push(`[${timestamp}] ${message}`);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–±—ã—Ç–∏–π
    if (window.simulation.recentActivities.length > 10) {
        window.simulation.recentActivities = window.simulation.recentActivities.slice(-10);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
function filterAndLoadActiveAuftraege() {
    console.log("üîç Filterung der aktiven Auftr√§ge...");

    const allOrders = window.simulation.auftraege || [];
    console.log(`üì¶ Gesamtanzahl der zu pr√ºfenden Auftr√§ge: ${allOrders.length}`);

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –ø–æ –ø–æ–ª—é Start (–ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä)
    // –∏ –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    window.simulation.auftraegeQueue = allOrders
        .filter(auftrag => {
            if (!auftrag.auftrag_nr) {
                console.warn(`‚ö†Ô∏è Auftrag ohne Nummer:`, auftrag);
                return false;
            }

            const hasWorkPlan = window.simulation.arbeitsplaene.some(
                plan => plan.auftrag_nr === auftrag.auftrag_nr
            );

            if (!hasWorkPlan) {
                console.warn(`‚ö†Ô∏è Kein Arbeitsplan f√ºr Auftrag ${auftrag.auftrag_nr}`);
                return false;
            }

            return true;
        })
        .sort((a, b) => {
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–ª—é Start (–ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏)
            const startA = typeof a.Start === 'number' ? a.Start : parseInt(a.Start) || 0;
            const startB = typeof b.Start === 'number' ? b.Start : parseInt(b.Start) || 0;
            return startA - startB;
        });

    console.log(`‚úÖ Geladene Auftr√§ge (sortiert nach Reihenfolge): ${window.simulation.auftraegeQueue.length}`);

    // –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    window.simulation.auftraegeQueue.slice(0, 5).forEach(auftrag => {
        console.log(`  üìã Auftrag ${auftrag.auftrag_nr}: Reihenfolge=${auftrag.Start}`);
    });
}

function calculateMaxConcurrentOrders() {
    // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞: –Ω–∞—á–∏–Ω–∞–µ–º —Å –Ω–µ–±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
    const elapsedDays = Math.floor(window.simulation.currentTimeMinutes / (24 * 60));
    const totalMachines = window.simulation.maschinen.length;

    // –ë–∞–∑–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—à–∏–Ω
    // –ú–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å –∫–∞–∂–¥—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –∏–ª–∏ –ø–æ –¥—Ä—É–≥–æ–π –ª–æ–≥–∏–∫–µ
    let maxConcurrent = Math.max(2, Math.floor(totalMachines * 1.5));

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º (–∫–∞–∂–¥—ã–µ 7 –¥–Ω–µ–π +1 –∑–∞–∫–∞–∑)
    maxConcurrent += Math.floor(elapsedDays / 7);

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º–æ–º
    const absoluteMax = Math.min(10, window.simulation.auftraegeQueue.length);
    return Math.min(maxConcurrent, absoluteMax);
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
// –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –î–õ–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ó–ê–ö–ê–ó–û–í

// 1. –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è initAuftraegeStatus - –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function initAuftraegeStatus() {
    console.log("üîÑ Initialisierung der Auftragsstatus...");

    window.simulation.auftraegeStatus = {};

    if (!window.simulation.auftraegeQueue || window.simulation.auftraegeQueue.length === 0) {
        console.warn("‚ö†Ô∏è Keine Auftr√§ge in der Warteschlange zur Initialisierung!");
        return;
    }

    for (const auftrag of window.simulation.auftraegeQueue) {
        const arbeitsplaene = getArbeitsplaeneFor(auftrag.auftrag_nr)
            .sort((a, b) => (a.reihenfolge || 0) - b.reihenfolge || 0);

        if (arbeitsplaene.length === 0) {
            console.warn(`‚ö†Ô∏è Keine Arbeitspl√§ne f√ºr Auftrag ${auftrag.auftrag_nr}`);
            continue;
        }

        const currentTime = window.simulation.currentTimeMinutes;

        window.simulation.auftraegeStatus[auftrag.auftrag_nr] = {
            currentStep: 0,
            arbeitsplaene: arbeitsplaene,
            completed: false,
            activated: false,
            activationTime: null,
            waiting: false,
            anzahl: auftrag.Anzahl || 1,
            enteredSystemTime: currentTime,
            waitingStartTime: currentTime,
            totalWaitingTime: 0,
            currentOperationStartTime: null,
            operationHistory: [],
            bufferEntryTime: null,
            priority: auftrag.Start
        };

        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–∫–∞–∑–æ–≤
        window.simulation.statistics.orderStatistics[auftrag.auftrag_nr] = {
            // –ë–∞–∑–æ–≤—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
            enteredSystemTime: currentTime,
            activationTime: null,        // –ö–æ–≥–¥–∞ –∑–∞–∫–∞–∑ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
            startTime: null,             // –ö–æ–≥–¥–∞ –Ω–∞—á–∞–ª–∞—Å—å –ø–µ—Ä–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
            endTime: null,               // –ö–æ–≥–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –æ–ø–µ—Ä–∞—Ü–∏—è

            // –í—Ä–µ–º–µ–Ω–∞
            totalLeadTime: 0,            // –û–±—â–µ–µ –≤—Ä–µ–º—è –≤ —Å–∏—Å—Ç–µ–º–µ
            totalProcessingTime: 0,      // –ß–∏—Å—Ç–æ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            totalWaitingTime: 0,         // –û–±—â–µ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
            totalQueueTime: 0,           // –í—Ä–µ–º—è –≤ –æ—á–µ—Ä–µ–¥—è—Ö

            // –û–ø–µ—Ä–∞—Ü–∏–∏
            operations: [],              // –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
            operationHistory: [],        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è

            // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            quantity: auftrag.Anzahl || 1,
            priority: auftrag.Start,
            machinesUsed: [],

            // –°–æ—Å—Ç–æ—è–Ω–∏–µ
            isActive: false,
            isCompleted: false,
            currentOperation: 0,

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            averageOperationTime: 0,
            machineChanges: 0,
            bottleneckMachine: null,
            longestWaitTime: 0
        };

        console.log(`‚úÖ Auftrag ${auftrag.auftrag_nr} mit Priorit√§t ${auftrag.Start} und ${arbeitsplaene.length} Operationen initialisiert`);
    }

    console.log(`‚úÖ Insgesamt ${Object.keys(window.simulation.auftraegeStatus).length} Auftr√§ge initialisiert`);
}

// 2. –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function processActiveTasksWithTimeCheck(stepSize = 1) {
    window.simulation.activeTasks = window.simulation.activeTasks.filter(task => {
        const machineData = window.simulation.maschinen.find(m => m.Nr == task.maschine);

        if (!machineData) {
            console.error(`‚ùå Maschine ${task.maschine} ist nicht gefunden!`);
            return false;
        }

        const canWork = isMachineWorkingTimeAndAvailable(machineData);

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—É–∑
        if (!canWork) {
            if (!task.paused) {
                task.paused = true;
                task.pauseStartTime = window.simulation.currentTimeMinutes;
                console.log(`‚è∏Ô∏è Auftrag ${task.auftrag_nr} auf Maschine ${task.maschine} wurde pausiert`);
            }
            return true;
        } else {
            if (task.paused) {
                task.paused = false;
                const pauseDuration = window.simulation.currentTimeMinutes - (task.pauseStartTime || 0);
                task.pausedTotalTime = (task.pausedTotalTime || 0) + pauseDuration;
                console.log(`‚ñ∂Ô∏è Auftrag ${task.auftrag_nr} wurde fortgesetzt (Pause: ${pauseDuration} Min)`);
            }
        }

        // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–∞ –ø–∞—É–∑–µ, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ—ë
        if (task.paused) {
            return true;
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É
        task.remaining -= stepSize;
        task.processedUnits = Math.floor((1 - task.remaining / task.totalDuration) * task.anzahl);

        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        const orderStats = window.simulation.statistics.orderStatistics[task.auftrag_nr];
        if (orderStats) {
            orderStats.totalProcessingTime += stepSize;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
        if (task.remaining <= 0) {
            console.log(`‚úÖ Aufgabe abgeschlossen: Auftrag ${task.auftrag_nr} auf Maschine ${task.maschine}`);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã
            const maschine = window.simulation.maschinenStatus[task.maschine];
            maschine.frei = true;
            maschine.hasUnfinishedTask = false;

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—à–∏–Ω—ã
            const utilization = window.simulation.statistics.machineUtilization[task.maschine];
            if (utilization) {
                utilization.operationsCompleted++;
                utilization.totalPartsProcessed += task.anzahl;
            }

            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–∫–∞–∑–∞
            const auftragStatus = window.simulation.auftraegeStatus[task.auftrag_nr];

            if (auftragStatus && orderStats) {
                const currentTime = window.simulation.currentTimeMinutes;

                // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–± –æ–ø–µ—Ä–∞—Ü–∏–∏
                const operationRecord = {
                    operationNumber: auftragStatus.currentStep + 1,
                    machineId: task.maschine,
                    startTime: task.startTime,
                    endTime: currentTime,
                    plannedDuration: task.dauerPerUnit * task.anzahl,
                    actualDuration: task.totalDuration,
                    pausedTime: task.pausedTotalTime || 0,
                    unitsProcessed: task.anzahl,
                    waitingTimeBefore: task.waitingTimeBefore || 0,
                    queueTime: task.queueTime || 0
                };

                // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π
                orderStats.operations.push(operationRecord);
                auftragStatus.operationHistory.push(operationRecord);

                // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫–∞–∑–∞
                if (!orderStats.machinesUsed.includes(task.maschine)) {
                    orderStats.machinesUsed.push(task.maschine);
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –æ–∂–∏–¥–∞–Ω–∏—è
                orderStats.totalQueueTime += (task.waitingTimeBefore || 0);
                orderStats.totalWaitingTime += (task.waitingTimeBefore || 0);

                // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–∞–º–æ–µ –¥–æ–ª–≥–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
                if ((task.waitingTimeBefore || 0) > orderStats.longestWaitTime) {
                    orderStats.longestWaitTime = task.waitingTimeBefore || 0;
                    orderStats.bottleneckMachine = task.maschine;
                }

                // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
                auftragStatus.currentStep++;
                orderStats.currentOperation = auftragStatus.currentStep;

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
                if (auftragStatus.currentStep >= auftragStatus.arbeitsplaene.length) {
                    // –ó–ê–ö–ê–ó –ü–û–õ–ù–û–°–¢–¨–Æ –ó–ê–í–ï–†–®–ï–ù
                    auftragStatus.completed = true;
                    orderStats.isCompleted = true;
                    orderStats.endTime = currentTime;

                    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω
                    orderStats.totalLeadTime = orderStats.endTime - orderStats.enteredSystemTime;

                    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑ –æ–ø–µ—Ä–∞—Ü–∏–π
                    orderStats.totalProcessingTime = orderStats.operations.reduce(
                        (sum, op) => sum + op.actualDuration, 0
                    );

                    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
                    orderStats.totalWaitingTime = orderStats.operations.reduce(
                        (sum, op) => sum + op.waitingTimeBefore, 0
                    );

                    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏
                    orderStats.averageOperationTime = orderStats.totalProcessingTime / orderStats.operations.length;

                    // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–º–µ–Ω –º–∞—à–∏–Ω
                    orderStats.machineChanges = Math.max(0, orderStats.machinesUsed.length - 1);

                    window.simulation.statistics.completedTasks++;
                    console.log(`üéâ Auftrag ${task.auftrag_nr} vollst√§ndig abgeschlossen!`);
                    console.log(`üìä Statistik: LeadTime=${orderStats.totalLeadTime}min, Processing=${orderStats.totalProcessingTime}min, Waiting=${orderStats.totalWaitingTime}min`);

                    addActivity(`Auftrag ${task.auftrag_nr} vollst√§ndig abgeschlossen (${orderStats.totalLeadTime}min)`);
                } else {
                    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
                    auftragStatus.waitingStartTime = currentTime;
                    orderStats.isActive = true; // –û—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º
                    console.log(`‚û°Ô∏è Auftrag ${task.auftrag_nr} –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –æ–ø–µ—Ä–∞—Ü–∏–∏ ${auftragStatus.currentStep + 1}`);
                }
            }

            return false; // –£–¥–∞–ª—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
        }
        return true; // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–¥–∞—á–∏
    });
}

// 3. –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è startNewTasksWithTimeCheck —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è
function startNewTasksWithTimeCheck() {
    Object.keys(window.simulation.maschinenStatus).forEach(machineId => {
        const machineStatus = window.simulation.maschinenStatus[machineId];
        const machineData = window.simulation.maschinen.find(m => m.Nr == machineId);

        if (!machineData || machineStatus.queue.length === 0) {
            return;
        }

        const isWorkingTime = isMachineWorkingTimeAndAvailable(machineData);
        const canStart = machineStatus.frei && !machineStatus.hasUnfinishedTask && isWorkingTime;

        if (!canStart) {
            return;
        }

        const nextOrder = machineStatus.queue.shift();
        const totalDuration = nextOrder.anzahl * nextOrder.operation.dauer;
        const currentTime = window.simulation.currentTimeMinutes;

        console.log(`üéØ –ó–ê–ü–£–°–ö –ó–ê–î–ê–ß–ò: –ó–∞–∫–∞–∑ ${nextOrder.auftrag_nr} –Ω–∞ –º–∞—à–∏–Ω–µ ${machineId}, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${totalDuration} –º–∏–Ω`);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –º–∞—à–∏–Ω—ã
        machineStatus.frei = false;
        machineStatus.hasUnfinishedTask = true;

        const auftragStatus = window.simulation.auftraegeStatus[nextOrder.auftrag_nr];
        const orderStats = window.simulation.statistics.orderStatistics[nextOrder.auftrag_nr];

        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è
        let waitingTime = 0;
        let queueTime = 0;

        if (nextOrder.queueEntryTime) {
            queueTime = currentTime - nextOrder.queueEntryTime;
        }

        if (auftragStatus.waitingStartTime) {
            waitingTime = currentTime - auftragStatus.waitingStartTime;
            auftragStatus.totalWaitingTime += waitingTime;
            auftragStatus.waitingStartTime = null;
        }

        auftragStatus.currentOperationStartTime = currentTime;

        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        if (orderStats) {
            // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º startTime
            if (orderStats.startTime === null) {
                orderStats.startTime = currentTime;
                orderStats.isActive = true;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
            orderStats.totalWaitingTime += waitingTime;
            orderStats.totalQueueTime += queueTime;

            // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—à–∏–Ω—É –≤ —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö
            if (!orderStats.machinesUsed.includes(machineId)) {
                orderStats.machinesUsed.push(machineId);
            }
        }

        // –°–æ–∑–¥–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É
        const newTask = {
            auftrag_nr: nextOrder.auftrag_nr,
            maschine: machineId,
            remaining: totalDuration,
            operation: auftragStatus.currentStep + 1,
            paused: false,
            anzahl: nextOrder.anzahl,
            dauerPerUnit: nextOrder.operation.dauer,
            processedUnits: 0,
            totalDuration: totalDuration,
            startTime: currentTime,
            waitingTimeBefore: waitingTime,
            queueTime: queueTime,
            pausedTotalTime: 0
        };

        window.simulation.activeTasks.push(newTask);

        const currentHour = Math.floor(getCurrentTimeInDay() / 60);
        const currentMinute = getCurrentTimeInDay() % 60;

        console.log(`‚úÖ –ó–ê–î–ê–ß–ê –ó–ê–ü–£–©–ï–ù–ê: –ó–∞–∫–∞–∑ ${nextOrder.auftrag_nr} –Ω–∞ –º–∞—à–∏–Ω–µ ${machineId} –≤ ${currentHour}:${String(currentMinute).padStart(2, '0')}`);
        addActivity(`–ù–∞—á–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ ${nextOrder.auftrag_nr} –Ω–∞ –º–∞—à–∏–Ω–µ ${machineId}`);
    });
}

// 4. –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è processReadyOrders —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
function processReadyOrders() {
    const currentTime = window.simulation.currentTimeMinutes;

    console.log(`üìã === –û–ë–†–ê–ë–û–¢–ö–ê –ì–û–¢–û–í–´–• –ó–ê–ö–ê–ó–û–í (–≤—Ä–µ–º—è: ${currentTime}) ===`);

    const maxConcurrentOrders = calculateMaxConcurrentOrders();
    const activeOrders = Object.values(window.simulation.auftraegeStatus)
        .filter(status => status.activated && !status.completed);
    const waitingOrders = Object.values(window.simulation.auftraegeStatus)
        .filter(status => !status.activated && !status.completed);

    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤: –ê–∫—Ç–∏–≤–Ω—ã–µ: ${activeOrders.length}, –û–∂–∏–¥–∞—é—â–∏–µ: ${waitingOrders.length}, –ú–∞–∫—Å–∏–º—É–º: ${maxConcurrentOrders}`);

    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
    if (activeOrders.length < maxConcurrentOrders && waitingOrders.length > 0) {
        const ordersToActivate = Math.min(maxConcurrentOrders - activeOrders.length, waitingOrders.length);
        console.log(`üöÄ –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º ${ordersToActivate} –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤`);

        const sortedWaitingOrders = window.simulation.auftraegeQueue
            .filter(auftrag => {
                const status = window.simulation.auftraegeStatus[auftrag.auftrag_nr];
                return status && !status.activated && !status.completed;
            })
            .sort((a, b) => (a.Start || 0) - (b.Start || 0));

        for (let i = 0; i < ordersToActivate && i < sortedWaitingOrders.length; i++) {
            const auftrag = sortedWaitingOrders[i];
            const auftragStatus = window.simulation.auftraegeStatus[auftrag.auftrag_nr];
            const orderStats = window.simulation.statistics.orderStatistics[auftrag.auftrag_nr];

            auftragStatus.activated = true;
            auftragStatus.activationTime = currentTime;
            auftragStatus.waitingStartTime = currentTime;

            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            if (orderStats) {
                orderStats.activationTime = currentTime;
                orderStats.isActive = false; // –°—Ç–∞–Ω–µ—Ç true –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–µ—Ä–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
                orderStats.totalWaitingTime += (currentTime - orderStats.enteredSystemTime); // –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            }

            console.log(`‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∑–∞–∫–∞–∑ ${auftrag.auftrag_nr} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${auftrag.Start})`);
            addActivity(`–ó–∞–∫–∞–∑ ${auftrag.auftrag_nr} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`);
        }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –≤ –æ—á–µ—Ä–µ–¥–∏ –º–∞—à–∏–Ω
    for (const auftrag of window.simulation.auftraegeQueue) {
        const auftragStatus = window.simulation.auftraegeStatus[auftrag.auftrag_nr];

        if (!auftragStatus || auftragStatus.completed || !auftragStatus.activated) {
            continue;
        }

        const hasActiveTask = window.simulation.activeTasks.some(task => task.auftrag_nr === auftrag.auftrag_nr);
        if (hasActiveTask) {
            continue;
        }

        const currentOperation = auftragStatus.arbeitsplaene[auftragStatus.currentStep];
        if (!currentOperation) {
            continue;
        }

        const machineId = currentOperation.maschine;
        const machineStatus = window.simulation.maschinenStatus[machineId];

        if (!machineStatus) {
            continue;
        }

        const alreadyInQueue = machineStatus.queue.some(item => item.auftrag_nr === auftrag.auftrag_nr);
        if (alreadyInQueue) {
            continue;
        }

        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤—Ö–æ–¥–∞ –≤ –æ—á–µ—Ä–µ–¥—å
        const queueItem = {
            auftrag_nr: auftrag.auftrag_nr,
            operation: currentOperation,
            anzahl: auftrag.Anzahl || 1,
            queueEntryTime: currentTime, // –í–∞–∂–Ω–æ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ –æ—á–µ—Ä–µ–¥–∏
            priority: auftrag.Start || 0
        };

        machineStatus.queue.push(queueItem);

        console.log(`üìù –ó–∞–∫–∞–∑ ${auftrag.auftrag_nr} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –º–∞—à–∏–Ω—ã ${machineId}`);
    }
}

// 5. –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ò

function getDetailedOrderStatistics() {
    const stats = window.simulation.statistics.orderStatistics;
    const completed = Object.values(stats).filter(order => order.isCompleted);
    const active = Object.values(stats).filter(order => order.isActive && !order.isCompleted);
    const waiting = Object.values(stats).filter(order => !order.isActive && !order.isCompleted);

    return {
        summary: {
            total: Object.keys(stats).length,
            completed: completed.length,
            active: active.length,
            waiting: waiting.length
        },
        completed: completed.map(order => ({
            auftrag_nr: Object.keys(stats).find(key => stats[key] === order),
            totalLeadTime: order.totalLeadTime,
            totalProcessingTime: order.totalProcessingTime,
            totalWaitingTime: order.totalWaitingTime,
            averageOperationTime: order.averageOperationTime,
            machinesUsed: order.machinesUsed.length,
            machineChanges: order.machineChanges,
            bottleneckMachine: order.bottleneckMachine,
            longestWaitTime: order.longestWaitTime,
            efficiency: ((order.totalProcessingTime / order.totalLeadTime) * 100).toFixed(1) + '%'
        })),
        active: active.map(order => ({
            auftrag_nr: Object.keys(stats).find(key => stats[key] === order),
            currentOperation: order.currentOperation,
            completedOperations: order.operations.length,
            totalOperations: order.operations.length + (order.currentOperation || 0),
            timeInSystem: window.simulation.currentTimeMinutes - order.enteredSystemTime,
            processedSoFar: order.totalProcessingTime
        }))
    };
}

function validateOrderStatistics() {
    console.log("üîç –í–ê–õ–ò–î–ê–¶–ò–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ó–ê–ö–ê–ó–û–í");

    const stats = window.simulation.statistics.orderStatistics;
    const issues = [];

    Object.entries(stats).forEach(([auftragNr, orderStats]) => {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –õ–æ–≥–∏—á–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω
        if (orderStats.endTime && orderStats.startTime && orderStats.endTime < orderStats.startTime) {
            issues.push(`‚ùå ${auftragNr}: endTime < startTime`);
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: LeadTime = endTime - enteredSystemTime
        if (orderStats.isCompleted) {
            const calculatedLeadTime = orderStats.endTime - orderStats.enteredSystemTime;
            if (Math.abs(calculatedLeadTime - orderStats.totalLeadTime) > 1) {
                issues.push(`‚ùå ${auftragNr}: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π totalLeadTime (${orderStats.totalLeadTime} vs ${calculatedLeadTime})`);
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –°—É–º–º–∞ –≤—Ä–µ–º–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
        const sumOperationTimes = orderStats.operations.reduce((sum, op) => sum + op.actualDuration, 0);
        if (Math.abs(sumOperationTimes - orderStats.totalProcessingTime) > 1) {
            issues.push(`‚ùå ${auftragNr}: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π totalProcessingTime (${orderStats.totalProcessingTime} vs ${sumOperationTimes})`);
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π
        const expectedOperations = window.simulation.auftraegeStatus[auftragNr]?.arbeitsplaene?.length || 0;
        if (orderStats.isCompleted && orderStats.operations.length !== expectedOperations) {
            issues.push(`‚ùå ${auftragNr}: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π (${orderStats.operations.length} vs ${expectedOperations})`);
        }
    });

    if (issues.length === 0) {
        console.log("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞");
    } else {
        console.log("‚ùå –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ:");
        issues.forEach(issue => console.log(issue));
    }

    return issues;
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
export {
    initAuftraegeStatus,
    processActiveTasksWithTimeCheck,
    startNewTasksWithTimeCheck,
    getDetailedOrderStatistics,
    validateOrderStatistics
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–±–æ—á–∏—Ö –ø–ª–∞–Ω–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
function getArbeitsplaeneFor(auftrag_nr) {
    return window.simulation.arbeitsplaene.filter(plan => plan.auftrag_nr === auftrag_nr);
}

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–ª—É—á–∞–π –ø—Ä–æ–±–ª–µ–º —Å –ë–î
function loadTestData() {

    window.simulation.maschinen = [
        {Nr: 1, Bezeichnung: "Maschine A", Kap_Tag: 8, verf_von: "2022-01-01", verf_bis: "2023-12-31"},
        {Nr: 2, Bezeichnung: "Maschine B", Kap_Tag: 6, verf_von: "2022-01-01", verf_bis: "2023-12-31"},
        {Nr: 3, Bezeichnung: "Maschine C", Kap_Tag: 10, verf_von: "2022-01-01", verf_bis: "2023-12-31"}
    ];


    window.simulation.auftraege = [
        {auftrag_nr: "A001", Anzahl: 100, Start: 45000},
        {auftrag_nr: "A002", Anzahl: 50, Start: 45001},
        {auftrag_nr: "A003", Anzahl: 75, Start: 45002}
    ];

    window.simulation.arbeitsplaene = [
        {auftrag_nr: "A001", maschine: 1, dauer: 16, reihenfolge: 1},
        {auftrag_nr: "A001", maschine: 2, dauer: 12, reihenfolge: 2},
        {auftrag_nr: "A002", maschine: 2, dauer: 10, reihenfolge: 1},
        {auftrag_nr: "A002", maschine: 3, dauer: 8, reihenfolge: 2},
        {auftrag_nr: "A003", maschine: 1, dauer: 20, reihenfolge: 1}
    ];

    initMaschinen(window.simulation.maschinen);
    filterAndLoadActiveAuftraege();
    initAuftraegeStatus();
    addActivity("Testdaten wurden geladen");
}

function startSimulation() {
    if (window.simulation.isRunning) return;

    window.simulation.isRunning = true;
    window.simulation.startTime = Date.now();
    if (!window.simulation.statistics.systemStartTime) {
        window.simulation.statistics.systemStartTime = window.simulation.currentTimeMinutes;
    }

    // –°–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ü–∏–∫–ª–∞ —Å–∏–º—É–ª—è—Ü–∏–∏
    const runSimulationLoop = async () => {
        if (!window.simulation.isRunning) return;

        try {
            await simulationStep(); // –¢–µ–ø–µ—Ä—å –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å await
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤ —Å–∏–º—É–ª—è—Ü–∏–∏:', error);
        }

        // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
        if (window.simulation.isRunning) {
            window.simulation.timer = setTimeout(runSimulationLoop, window.simulation.intervalMs);
        }
    };

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —à–∞–≥
    runSimulationLoop();

    addActivity("Simulation gestartet");
    startAnimation();
}

function stopSimulation() {
    window.simulation.isRunning = false;
    if (window.simulation.timer) {
        clearTimeout(window.simulation.timer); // –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º clearTimeout
        window.simulation.timer = null;
    }
    addActivity("Simulation gestoppt");
    stopAnimation();
}

async function resetSimulation() {
    console.log("üîÑ Simulation zur√ºcksetzen");
    stopSimulation();

    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏–º—É–ª—è—Ü–∏–∏
    window.simulation.currentTimeMinutes = calculateDayFromDate('2022-01-03') * 24 * 60;

    window.simulation.activeTasks = [];
    window.simulation.auftraegeQueue = [];
    window.simulation.maschinenStatus = {};
    window.simulation.auftraegeStatus = {};
    window.simulation.recentActivities = [];
    window.simulation.startTime = null;
    window.simulation.statistics = {
        completedTasks: 0,
        totalProcessingTime: 0,
        machineUtilization: {},
        orderStatistics: {},
        machineIdleTime: {},
        bufferStatistics: {}, // –î–û–ë–ê–í–ò–¢–¨
        totalSimulationTime: 0,
        systemStartTime: null
    };

    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    await loadInitialData();
    console.log("üîÑ Simulation zur√ºcksetzen");
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    draw();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–∏–º—É–ª—è—Ü–∏–∏
function getCurrentSimulationSpeed() {
    return window.simulation.simulationMinutesPerStep || 1;
}

function getCurrentDay() {
    return Math.floor(window.simulation.currentTimeMinutes / (24 * 60));
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–Ω—è —Å–∏–º—É–ª—è—Ü–∏–∏ –≤ –¥–∞—Ç—É
function getCurrentDate() {
    const dayNumber = getCurrentDay();
    // –ë–∞–∑–æ–≤–∞—è –¥–∞—Ç–∞ - 1 —è–Ω–≤–∞—Ä—è 2020 –≥–æ–¥–∞ (–¥–µ–Ω—å 0)
    const baseDate = new Date('2022-01-03');
    const currentDate = new Date(baseDate);
    currentDate.setDate(baseDate.getDate() + dayNumber);
    return currentDate;
}

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–∞—à–∏–Ω—ã
function isMachineAvailable(machine) {
    const currentDate = getCurrentDate();

    let verfVon, verfBis;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ –∫–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã–µ
    if (typeof machine.verf_von === 'number' && typeof machine.verf_bis === 'number') {
        verfVon = excelToDate(machine.verf_von);
        verfBis = excelToDate(machine.verf_bis);

    } else {
        // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∏
        verfVon = new Date(machine.verf_von);
        verfBis = new Date(machine.verf_bis);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ª–∏ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª–∏—Å—å –¥–∞—Ç—ã
        if (isNaN(verfVon.getTime()) || isNaN(verfBis.getTime())) {
            console.error(`‚ùå Ung√ºltiges Datumsformat:`, machine.verf_von, machine.verf_bis);
            return false;
        }
    }

    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—ã (–±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏)
    const currentDateOnly = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate());
    const verfVonOnly = new Date(verfVon.getFullYear(), verfVon.getMonth(), verfVon.getDate());
    const verfBisOnly = new Date(verfBis.getFullYear(), verfBis.getMonth(), verfBis.getDate());

    const isAvailable = currentDateOnly >= verfVonOnly && currentDateOnly <= verfBisOnly;

    return isAvailable;
}

function excelToDate(serial) {
    // Excel —Å—á–∏—Ç–∞–µ—Ç –¥–Ω–∏ —Å 1 —è–Ω–≤–∞—Ä—è 1900, –Ω–æ –∏–º–µ–µ—Ç –æ—à–∏–±–∫—É —Å –≤–∏—Å–æ–∫–æ—Å–Ω—ã–º –≥–æ–¥–æ–º
    // –ü–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º 30 –¥–µ–∫–∞–±—Ä—è 1899 –∫–∞–∫ –±–∞–∑–æ–≤—É—é –¥–∞—Ç—É
    const excelEpoch = new Date(1899, 11, 30); // 30 –¥–µ–∫–∞–±—Ä—è 1899
    const date = new Date(excelEpoch.getTime() + serial * 86400 * 1000);
    return date; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º Date –æ–±—ä–µ–∫—Ç, –∞ –Ω–µ —Å—Ç—Ä–æ–∫—É
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –¥–Ω–µ (–≤ –º–∏–Ω—É—Ç–∞—Ö –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–Ω—è)
function getCurrentTimeInDay() {
    return window.simulation.currentTimeMinutes % (24 * 60);
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –º–∞—à–∏–Ω–∞ –≤ –¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
function isMachineWorkingTime(machine) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–∞—à–∏–Ω—ã –ø–æ –¥–∞—Ç–∞–º
    if (!isMachineAvailable(machine)) return false;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã—Ö–æ–¥–Ω–æ–π –ª–∏ –¥–µ–Ω—å (—Å—É–±–±–æ—Ç–∞ = 6, –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ = 0)
    const currentDate = getCurrentDate();
    const dayOfWeek = currentDate.getDay();
    if (dayOfWeek === 0 || dayOfWeek === 6) {
        return false; // –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –∏–ª–∏ —Å—É–±–±–æ—Ç–∞ - –≤—ã—Ö–æ–¥–Ω–æ–π
    }

    const timeInDay = getCurrentTimeInDay();
    const workingHours = machine.Kap_Tag * 60; // –ü–µ—Ä–µ–≤–æ–¥–∏–º —á–∞—Å—ã –≤ –º–∏–Ω—É—Ç—ã

    // –†–∞–±–æ—á–∏–π –¥–µ–Ω—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤ 08:00 (480 –º–∏–Ω—É—Ç –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–Ω—è)
    const workStart = 8 * 60; // 08:00
    const workEnd = workStart + workingHours;

    const isWorkingTime = timeInDay >= workStart && timeInDay < workEnd;

    return isWorkingTime;
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –º–∞—à–∏–Ω–∞ –≤ –¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
function isMachineWorkingTimeAndAvailable(machine) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —É—Å–ª–æ–≤–∏—è
    return isMachineWorkingTime(machine);
}

// –û—Å–Ω–æ–≤–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∏–º—É–ª—è—Ü–∏–∏

// 1. –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è checkSimulationCompletion
function checkSimulationCompletion() {
    if (!window.simulation.isRunning) {
        return false;
    }

    const hasActiveTasks = window.simulation.activeTasks.length > 0;
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∏–º—É–ª—è—Ü–∏–∏:`);
    console.log(`  - –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏: ${window.simulation.activeTasks.length}`);

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    const completedOrders = Object.values(window.simulation.auftraegeStatus)
        .filter(status => status.completed);

    const activeOrders = Object.values(window.simulation.auftraegeStatus)
        .filter(status => status.activated && !status.completed);

    const waitingOrders = Object.values(window.simulation.auftraegeStatus)
        .filter(status => !status.activated && !status.completed);

    console.log(`  - –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã: ${completedOrders.length}`);
    console.log(`  - –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã: ${activeOrders.length}`);
    console.log(`  - –û–∂–∏–¥–∞—é—â–∏–µ –∑–∞–∫–∞–∑—ã: ${waitingOrders.length}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥–∏ –º–∞—à–∏–Ω
    let totalQueuedOrders = 0;
    Object.values(window.simulation.maschinenStatus).forEach(machineStatus => {
        totalQueuedOrders += machineStatus.queue.length;
    });
    console.log(`  - –ó–∞–∫–∞–∑—ã –≤ –æ—á–µ—Ä–µ–¥—è—Ö –º–∞—à–∏–Ω: ${totalQueuedOrders}`);

    // –£–°–õ–û–í–ò–ï –ó–ê–í–ï–†–®–ï–ù–ò–Ø: –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á, –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤, –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –≤ –æ—á–µ—Ä–µ–¥—è—Ö
    const shouldComplete = !hasActiveTasks &&
                          activeOrders.length === 0 &&
                          totalQueuedOrders === 0;

    if (shouldComplete) {
        if (waitingOrders.length > 0) {
            // –ï—Å—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–∫–∞–∑—ã - –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø–∞—Ä—Ç–∏—é
            console.log(`‚è≠Ô∏è –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø–∞—Ä—Ç–∏—é –∑–∞–∫–∞–∑–æ–≤ (${waitingOrders.length} –æ–∂–∏–¥–∞—é—Ç)`);
            return false; // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
        }

        // –í—Å–µ –∑–∞–∫–∞–∑—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã
        console.log("üéâ –í–°–ï –ó–ê–ö–ê–ó–´ –ó–ê–í–ï–†–®–ï–ù–´! –°–ò–ú–£–õ–Ø–¶–ò–Ø –û–°–¢–ê–ù–û–í–õ–ï–ù–ê!");
        addActivity(`üéâ –°–ò–ú–£–õ–Ø–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–∫–∞–∑–æ–≤: ${completedOrders.length}`);
        stopSimulation();
        return true;
    }

    return false;
}

// 2. –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è simulationStep —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
// –ü—Ä–æ—Å—Ç–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ simulationStep
async function simulationStep() {
    console.log("üîÑ === START DES SIMULATIONSSCHRITTS ===");
    console.log(`‚è∞ Aktuelle Zeit: ${window.simulation.currentTimeMinutes} Min (Tag ${getCurrentDay()})`);

    const totalSpeed = getCurrentSimulationSpeed();
    console.log(`üéØ –¢–æ—á–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${totalSpeed} –º–∏–Ω—É—Ç (${(totalSpeed/1440).toFixed(2)} –¥–Ω–µ–π)`);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    let batchSize;
    if (totalSpeed <= 60) {
        batchSize = 10; // –ú–∞–ª–µ–Ω—å–∫–∏–µ –±–∞—Ç—á–∏ –¥–ª—è –º–µ–¥–ª–µ–Ω–Ω—ã—Ö —Å–∫–æ—Ä–æ—Å—Ç–µ–π
    } else if (totalSpeed <= 1440) {
        batchSize = 60; // –°—Ä–µ–¥–Ω–∏–µ –±–∞—Ç—á–∏ (1 —á–∞—Å)
    } else if (totalSpeed <= 4320) {
        batchSize = 240; // –ë–æ–ª—å—à–∏–µ –±–∞—Ç—á–∏ (4 —á–∞—Å–∞)
    } else {
        batchSize = 480; // –û—á–µ–Ω—å –±–æ–ª—å—à–∏–µ –±–∞—Ç—á–∏ (8 —á–∞—Å–æ–≤)
    }

    let remainingTime = totalSpeed;
    let processedTime = 0;
    const startProcessingTime = performance.now();

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –í–°–ï –≤—Ä–µ–º—è, —Ä–∞–∑–±–∏–≤–∞—è –Ω–∞ –±–∞—Ç—á–∏ —Å yield –º–µ–∂–¥—É –Ω–∏–º–∏
    while (remainingTime > 0) {
        const currentBatchSize = Math.min(remainingTime, batchSize);

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á –ø–æ–ª–Ω–æ—Å—Ç—å—é
        await processBatch(currentBatchSize);

        processedTime += currentBatchSize;
        remainingTime -= currentBatchSize;

        console.log(`‚ö° –û–±—Ä–∞–±–æ—Ç–∞–Ω –±–∞—Ç—á ${currentBatchSize} –º–∏–Ω, –æ—Å—Ç–∞–ª–æ—Å—å ${remainingTime} –º–∏–Ω`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–∏–º—É–ª—è—Ü–∏–∏
        const completed = checkSimulationCompletion();
        if (completed) {
            console.log("‚úÖ Simulation beendet w√§hrend Batch-Verarbeitung");
            draw();
            return;
        }

        // Yield –∫–æ–Ω—Ç—Ä–æ–ª—å –±—Ä–∞—É–∑–µ—Ä—É –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –≤—Ä–µ–º—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏)
        if (remainingTime > 0) {
            await new Promise(resolve => setTimeout(resolve, 0));
        }
    }

    const processingTime = performance.now() - startProcessingTime;
    console.log(`‚úÖ –¢–û–ß–ù–û –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedTime} –º–∏–Ω—É—Ç –∑–∞ ${processingTime.toFixed(1)}–º—Å`);

    draw();
    console.log("=== ENDE DES SIMULATIONSSCHRITTS ===\n");
}


// 3. –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª—É—á—à–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–¥–∞
function updateMachineStatuses() {
    Object.keys(window.simulation.maschinenStatus).forEach(machineId => {
        const machineStatus = window.simulation.maschinenStatus[machineId];
        const machineData = window.simulation.maschinen.find(m => m.Nr == machineId);

        if (machineData) {
            const isAvailable = isMachineAvailable(machineData);
            const isWorkingTime = isMachineWorkingTimeAndAvailable(machineData);
            const activeTask = window.simulation.activeTasks.find(task => task.maschine == machineId);
            const hasActiveTask = Boolean(activeTask);

            machineStatus.verfuegbar = isAvailable;
            machineStatus.hasUnfinishedTask = hasActiveTask;

            // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–∞—à–∏–Ω—ã
            if (hasActiveTask) {
                // –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞
                machineStatus.frei = false;
                machineStatus.waitingForWorkingTime = !isWorkingTime;
            } else {
                // –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏
                machineStatus.frei = true;
                machineStatus.waitingForWorkingTime = false;
            }

            // –ú–∞—à–∏–Ω–∞ –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –æ–Ω–∞ —Å–≤–æ–±–æ–¥–Ω–∞, –¥–æ—Å—Ç—É–ø–Ω–∞ –∏ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
            machineStatus.canStartNewTask = machineStatus.frei && isAvailable && isWorkingTime;

            console.log(`üè≠ –ú–∞—à–∏–Ω–∞ ${machineId}: —Å–≤–æ–±–æ–¥–Ω–∞=${machineStatus.frei}, –¥–æ—Å—Ç—É–ø–Ω–∞=${isAvailable}, —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è=${isWorkingTime}, –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å=${machineStatus.canStartNewTask}`);
        }
    });
}

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è processActiveTasks —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–±–æ—Ä–æ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –±—É—Ñ–µ—Ä–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
function updateBufferStatistics(machineId, auftrag_nr, action, additionalData = {}) {
    const bufferStats = window.simulation.statistics.bufferStatistics[machineId];
    if (!bufferStats) return;

    const entry = {
        time: window.simulation.currentTimeMinutes,
        auftrag_nr: auftrag_nr,
        action: action, // 'enter_queue', 'start_processing', 'complete_processing'
        currentQueueLength: window.simulation.maschinenStatus[machineId]?.queue?.length || 0,
        ...additionalData
    };

    bufferStats.orderHistory.push(entry);
}



function cleanupCompletedOrders() {
    // –£–¥–∞–ª—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏
    const initialQueueLength = window.simulation.auftraegeQueue.length;
    window.simulation.auftraegeQueue = window.simulation.auftraegeQueue.filter(auftrag => {
        const auftragStatus = window.simulation.auftraegeStatus[auftrag.auftrag_nr];
        const isCompleted = auftragStatus && auftragStatus.completed;

        if (isCompleted) {
            console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ ${auftrag.auftrag_nr} –∏–∑ –æ—á–µ—Ä–µ–¥–∏`);
        }

        return !isCompleted;
    });

    // –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥–∏ –º–∞—à–∏–Ω –æ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    Object.keys(window.simulation.maschinenStatus).forEach(machineId => {
        const machineStatus = window.simulation.maschinenStatus[machineId];
        machineStatus.queue = machineStatus.queue.filter(queueItem => {
            const auftragStatus = window.simulation.auftraegeStatus[queueItem.auftrag_nr];
            return auftragStatus && !auftragStatus.completed;
        });
    });
}

function debugDataLoading() {
    console.log("=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –î–ê–ù–ù–´–• ===");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    console.log("üì¶ –ó–∞–∫–∞–∑—ã (auftraege):", window.simulation.auftraege);
    console.log("üìã –†–∞–±–æ—á–∏–µ –ø–ª–∞–Ω—ã (arbeitsplaene):", window.simulation.arbeitsplaene);
    console.log("üè≠ –ú–∞—à–∏–Ω—ã (maschinen):", window.simulation.maschinen);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    console.log("üìã –ó–∞–∫–∞–∑—ã –≤ –æ—á–µ—Ä–µ–¥–∏ (auftraegeQueue):", window.simulation.auftraegeQueue);
    console.log("üìä –°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤ (auftraegeStatus):", window.simulation.auftraegeStatus);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
    const currentDay = getCurrentDay();
    console.log("üìÖ –¢–µ–∫—É—â–∏–π –¥–µ–Ω—å —Å–∏–º—É–ª—è—Ü–∏–∏:", currentDay);
    console.log("üìÖ –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞:", getCurrentDate().toISOString().split('T')[0]);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∑–∞–∫–∞–∑ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ
    if (window.simulation.auftraege.length > 0) {
        console.log("üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–æ–≤:");
        window.simulation.auftraege.forEach(auftrag => {
            const shouldBeActive = auftrag.Start <= currentDay;
            const hasArbeitsplan = window.simulation.arbeitsplaene.some(
                plan => plan.auftrag_nr === auftrag.auftrag_nr
            );

            console.log(`  –ó–∞–∫–∞–∑ ${auftrag.auftrag_nr}:`);
            console.log(`    - –°—Ç–∞—Ä—Ç: ${auftrag.Start}, –¢–µ–∫—É—â–∏–π –¥–µ–Ω—å: ${currentDay}`);
            console.log(`    - –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫—Ç–∏–≤–µ–Ω: ${shouldBeActive}`);
            console.log(`    - –ï—Å—Ç—å —Ä–∞–±–æ—á–∏–π –ø–ª–∞–Ω: ${hasArbeitsplan}`);
            console.log(`    - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${auftrag.Anzahl}`);
        });
    }

    console.log("==============================");
}

function initMaschinen(maschinen) {
    console.log("üè≠ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—à–∏–Ω...");
    window.simulation.maschinenStatus = {};
    window.simulation.statistics.machineUtilization = {};

    for (const m of maschinen) {
        const isAvailable = isMachineAvailable(m);
        const isWorkingTime = isMachineWorkingTimeAndAvailable(m);

        // –î–ª—è –∫–∞–∂–¥–æ–π –º–∞—à–∏–Ω—ã —Å–æ–∑–¥–∞—Ç—å –±—É—Ñ–µ—Ä–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

        window.simulation.maschinenStatus[m.Nr] = {
            frei: true, // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤—Å–µ –º–∞—à–∏–Ω—ã —Å–≤–æ–±–æ–¥–Ω—ã
            kapTag: m.Kap_Tag,
            bezeichnung: m.Bezeichnung,
            verfuegbar: isAvailable,
            canStartNewTask: isWorkingTime && isAvailable,
            hasUnfinishedTask: false, // –ï—Å—Ç—å –ª–∏ –Ω–µ–∑–∞–∫–æ–Ω—á–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
            waitingForWorkingTime: false, // –ñ–¥–µ—Ç –ª–∏ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –Ω–µ–∑–∞–∫–æ–Ω—á–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ–π
            queue: [] // –î–æ–±–∞–≤–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –º–∞—à–∏–Ω—ã
        };

        window.simulation.statistics.machineUtilization[m.Nr] = {
            totalTime: 0,
            workingTime: 0,
            availableTime: 0,
            utilization: 0,

            // –ù–û–í–´–ï –ü–û–õ–Ø
            idleTime: 0,
            unavailableTime: 0,
            operationsCompleted: 0,
            totalPartsProcessed: 0,
            utilizationHistory: []
        };

        window.simulation.statistics.bufferStatistics[m.Nr] = {
            orderHistory: [], // –ó–ê–ú–ï–ù–ò–¢–¨ –≤—Å–µ –ø–æ–ª—è –Ω–∞ —ç—Ç–æ
        };
        const currentDate = getCurrentDate().toISOString().split('T')[0];
        const currentTime = `${Math.floor(getCurrentTimeInDay() / 60)}:${String(getCurrentTimeInDay() % 60).padStart(2, '0')}`;

        console.log(`üîß –ú–∞—à–∏–Ω–∞ ${m.Nr} (${m.Bezeichnung}): –¥–æ—Å—Ç—É–ø–Ω–∞=${isAvailable}, —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è=${isWorkingTime}, –¥–∞—Ç–∞=${currentDate}, –≤—Ä–µ–º—è=${currentTime}`);
    }
}

function updateMachineUtilization() {
    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö
    const currentStepSize = window.simulation.currentStepSize || getCurrentSimulationSpeed();

    Object.keys(window.simulation.maschinenStatus).forEach(machineId => {
        const machine = window.simulation.maschinenStatus[machineId];
        const machineData = window.simulation.maschinen.find(m => m.Nr == machineId);
        const utilization = window.simulation.statistics.machineUtilization[machineId];

        if (utilization && machineData) {
            const isAvailable = isMachineAvailable(machineData);
            const isWorkingTimeAndAvailable = isMachineWorkingTimeAndAvailable(machineData);

            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–ª—å–∫–æ –Ω–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è —à–∞–≥–∞
            if (isWorkingTimeAndAvailable) {
                // –ú–∞—à–∏–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –∏ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
                utilization.availableTime += currentStepSize;

                if (!machine.frei) {
                    // –ú–∞—à–∏–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
                    utilization.workingTime += currentStepSize;
                } else {
                    // –ú–∞—à–∏–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞, –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è, –Ω–æ –ø—Ä–æ—Å—Ç–∞–∏–≤–∞–µ—Ç
                    utilization.idleTime += currentStepSize;
                }
            } else if (!isAvailable) {
                // –ú–∞—à–∏–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –¥–∞—Ç–∞–º
                utilization.unavailableTime += currentStepSize;
            }
            // –ï—Å–ª–∏ –º–∞—à–∏–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞, –Ω–æ –Ω–µ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è - –Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏

            // –û–±—â–µ–µ –≤—Ä–µ–º—è —Å–∏–º—É–ª—è—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–π –º–∞—à–∏–Ω—ã
            utilization.totalTime += currentStepSize;

            // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Ç–∏–ª–∏–∑–∞—Ü–∏—é (–ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)
            utilization.utilization = utilization.availableTime > 0 ?
                (utilization.workingTime / utilization.availableTime * 100).toFixed(1) : 0;

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ (–∫–∞–∂–¥—ã–π —á–∞—Å —Å–∏–º—É–ª—è—Ü–∏–æ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)
            if (window.simulation.currentTimeMinutes % 60 === 0) {
                utilization.utilizationHistory.push({
                    time: window.simulation.currentTimeMinutes,
                    utilization: parseFloat(utilization.utilization),
                    isWorking: !machine.frei && isWorkingTimeAndAvailable,
                    workingTime: utilization.workingTime,
                    availableTime: utilization.availableTime,
                    idleTime: utilization.idleTime
                });

                // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
                if (utilization.utilizationHistory.length > 1000) {
                    utilization.utilizationHistory = utilization.utilizationHistory.slice(-500);
                }
            }
        }
    });
}


async function processBatch(batchTimeMinutes) {
    console.log(`üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á ${batchTimeMinutes} –º–∏–Ω—É—Ç`);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —à–∞–≥–∞ –≤–Ω—É—Ç—Ä–∏ –±–∞—Ç—á–∞
    const stepSize = batchTimeMinutes <= 60 ? 1 : (batchTimeMinutes <= 240 ? 5 : 15);
    let remainingBatchTime = batchTimeMinutes;

    while (remainingBatchTime > 0) {
        const currentStepSize = Math.min(remainingBatchTime, stepSize);

        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä —à–∞–≥–∞
        window.simulation.currentStepSize = currentStepSize;

        // –í—Å—è –ª–æ–≥–∏–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
        updateMachineStatuses();
        processReadyOrders();
        startNewTasksWithTimeCheck();
        processActiveTasksWithTimeCheck(currentStepSize);
        cleanupCompletedOrders();
        updateMachineUtilization(); // –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —à–∞–≥–∞

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–∏–º—É–ª—è—Ü–∏–∏
        window.simulation.statistics.totalSimulationTime += currentStepSize;
        window.simulation.currentTimeMinutes += currentStepSize;
        remainingBatchTime -= currentStepSize;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–∏–º—É–ª—è—Ü–∏–∏ –≤–Ω—É—Ç—Ä–∏ –±–∞—Ç—á–∞
        const completed = checkSimulationCompletion();
        if (completed) {
            return; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è, –µ—Å–ª–∏ —Å–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è
async function initialize() {
    await loadInitialData();
    debugDataLoading();
    draw(); // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
}

// Event listeners –¥–ª—è –∫–Ω–æ–ø–æ–∫ (–µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)
if (typeof document !== 'undefined') {
    document.addEventListener('DOMContentLoaded', () => {
        const speedSlider = document.getElementById("speedSlider");
        const startBtn = document.getElementById("startBtn");
        const stopBtn = document.getElementById("stopBtn");
        const resetBtn = document.getElementById("resetBtn");

        if (speedSlider) {
            speedSlider.addEventListener("change", (e) => {
                const value = parseInt(e.target.value);
                window.simulation.simulationMinutesPerStep = value;

                let timeLabel;
                if (value < 60) {
                    timeLabel = `${value} Min`;
                } else if (value < 1440) {
                    timeLabel = `${Math.floor(value / 60)} Std`;
                } else {
                    timeLabel = `${Math.floor(value / 1440)} Tag`;
                }

                console.log(`‚öôÔ∏è Simulationsgeschwindigkeit: ${timeLabel} pro Sekunde —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏`);
            });

        }

        if (startBtn) startBtn.addEventListener("click", startSimulation);
        if (stopBtn) stopBtn.addEventListener("click", stopSimulation);
        if (resetBtn) resetBtn.addEventListener("click", resetSimulation);
    });
}

// –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ò

function getMachineEfficiency(machineId) {
    const stats = window.simulation.statistics.machineUtilization[machineId];
    if (!stats) return null;

    return {
        utilization: parseFloat(stats.utilization),
        operationsCompleted: stats.operationsCompleted,
        totalPartsProcessed: stats.totalPartsProcessed,
        idleTime: stats.idleTime,
        workingTime: stats.workingTime,
        efficiency: stats.totalPartsProcessed / Math.max(1, stats.availableTime)
    };
}

function getAverageLeadTime() {
    const completedOrders = Object.values(window.simulation.statistics.orderStatistics)
        .filter(order => order.endTime !== null);

    if (completedOrders.length === 0) return 0;

    const totalLeadTime = completedOrders.reduce((sum, order) => sum + order.totalLeadTime, 0);
    return totalLeadTime / completedOrders.length;
}

function exportStatistics() {
    return {
        simulation: {
            totalTime: window.simulation.currentTimeMinutes,
            completedOrders: window.simulation.statistics.completedTasks,
            averageLeadTime: getAverageLeadTime()
        },
        orders: window.simulation.statistics.orderStatistics,
        machines: Object.keys(window.simulation.statistics.machineUtilization).map(id => ({
            id: parseInt(id),
            ...getMachineEfficiency(id)
        }))
    };
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export {
    loadInitialData,
    getArbeitsplaeneFor,
    initialize,
    startSimulation,
    stopSimulation,
    resetSimulation,
    addActivity,
    getCurrentTimeInDay,
    isMachineWorkingTime,
    getCurrentDate,
    isMachineAvailable,
    isMachineWorkingTimeAndAvailable,
    checkSimulationCompletion,
    simulationStep,
    updateMachineStatuses,
    processReadyOrders,
    cleanupCompletedOrders,
    // –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –°–¢–ê–¢–ò–°–¢–ò–ö–ò
    getMachineEfficiency,
    getAverageLeadTime,
    exportStatistics,
};

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ (–µ—Å–ª–∏ –Ω–µ –≤ –º–æ–¥—É–ª—å–Ω–æ–π —Å—Ä–µ–¥–µ)
if (typeof window !== 'undefined') {
    initialize().catch(console.error);
    window.isMachineAvailable = isMachineAvailable;
    window.isMachineWorkingTimeAndAvailable = isMachineWorkingTimeAndAvailable;
    window.isMachineWorkingTime = isMachineWorkingTime;
}