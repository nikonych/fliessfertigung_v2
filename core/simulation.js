// core/simulation.js
import {draw, startAnimation, stopAnimation} from "../ui/simulation/renderer.js";

window.simulation = {
    simulationMinutesPerStep: 1,
    isRunning: false,
    currentTimeMinutes: 45000 * 24 * 60, // –Ω–∞—á–Ω–∏ —Å 45000 –¥–Ω–µ–π, –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö –≤ –º–∏–Ω—É—Ç—ã
    intervalMs: 1000, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 —Å–µ–∫—É–Ω–¥–∞ (1 –º–∏–Ω—É—Ç–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ –∑–∞ —Å–µ–∫—É–Ω–¥—É)
    timer: 0,
    auftraegeQueue: [],
    activeTasks: [],
    maschinenStatus: {},
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Canvas
    auftraege: [],
    maschinen: [],
    arbeitsplaene: [],
    recentActivities: [],
    startTime: null,
    // –ù–æ–≤–æ–µ: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
    auftraegeStatus: {}, // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
    statistics: {
        completedTasks: 0,
        totalProcessingTime: 0,
        machineUtilization: {}
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async function loadInitialData() {
    try {
        console.log("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...");

        // –ï—Å–ª–∏ —ç—Ç–æ Electron –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º IPC –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        if (window.electronAPI) {
            window.simulation.auftraege = await window.electronAPI.getAuftraege();
            window.simulation.maschinen = await window.electronAPI.getMaschinen();
            window.simulation.arbeitsplaene = await window.electronAPI.getArbeitsplaene();
        } else {
            // –î–ª—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fetch API
            try {
                const [auftraegeRes, maschinenRes, arbeitsplaeneRes] = await Promise.all([
                    fetch('/api/auftraege'),
                    fetch('/api/maschinen'),
                    fetch('/api/arbeitsplaene')
                ]);

                window.simulation.auftraege = await auftraegeRes.json();
                window.simulation.maschinen = await maschinenRes.json();
                window.simulation.arbeitsplaene = await arbeitsplaeneRes.json();
            } catch (fetchError) {
                console.log("üß™ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ");
                loadTestData();
                return;
            }
        }

        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${window.simulation.auftraege.length} –∑–∞–∫–∞–∑–æ–≤, ${window.simulation.maschinen.length} –º–∞—à–∏–Ω`);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—à–∏–Ω
        initMaschinen(window.simulation.maschinen);

        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Ç–µ–∫—É—â–µ–º—É –¥–Ω—é (–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã)
        filterAndLoadActiveAuftraege();

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
        initAuftraegeStatus();

        console.log(`üìã –í –æ—á–µ—Ä–µ–¥–∏ ${window.simulation.auftraegeQueue.length} –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`);
        addActivity(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${window.simulation.auftraege.length} –∑–∞–∫–∞–∑–æ–≤ –∏ ${window.simulation.maschinen.length} –º–∞—à–∏–Ω`);

    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:", error);
        addActivity("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ");
        loadTestData();
    }
}

function addActivity(message) {
    const timestamp = new Date().toLocaleTimeString();
    window.simulation.recentActivities.push(`[${timestamp}] ${message}`);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–±—ã—Ç–∏–π
    if (window.simulation.recentActivities.length > 10) {
        window.simulation.recentActivities = window.simulation.recentActivities.slice(-10);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
function filterAndLoadActiveAuftraege() {
    window.simulation.auftraegeQueue = window.simulation.auftraege.filter(auftrag => {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –Ω–∞—á–∞—Ç—å—Å—è –¥–æ –∏–ª–∏ –≤ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
        return auftrag.Start <= getCurrentDay();
    });
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
function initAuftraegeStatus() {
    window.simulation.auftraegeStatus = {};

    for (const auftrag of window.simulation.auftraegeQueue) {
        const arbeitsplaene = getArbeitsplaeneFor(auftrag.auftrag_nr)
            .sort((a, b) => a.reihenfolge - b.reihenfolge);

        window.simulation.auftraegeStatus[auftrag.auftrag_nr] = {
            currentStep: 0, // –¢–µ–∫—É—â–∏–π —à–∞–≥ –≤ —Ä–∞–±–æ—á–µ–º –ø–ª–∞–Ω–µ
            arbeitsplaene: arbeitsplaene,
            completed: false,
            waiting: false // –ñ–¥–µ—Ç –ª–∏ –∑–∞–∫–∞–∑ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –º–∞—à–∏–Ω—ã
        };
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–±–æ—á–∏—Ö –ø–ª–∞–Ω–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
function getArbeitsplaeneFor(auftrag_nr) {
    return window.simulation.arbeitsplaene.filter(plan => plan.auftrag_nr === auftrag_nr);
}

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–ª—É—á–∞–π –ø—Ä–æ–±–ª–µ–º —Å –ë–î
function loadTestData() {
    console.log("üß™ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...");

    window.simulation.maschinen = [
        {Nr: 1, Bezeichnung: "–°—Ç–∞–Ω–æ–∫ –ê", Kap_Tag: 8, verf_von: 45000, verf_bis: 46000},
        {Nr: 2, Bezeichnung: "–°—Ç–∞–Ω–æ–∫ –ë", Kap_Tag: 6, verf_von: 45000, verf_bis: 46000},
        {Nr: 3, Bezeichnung: "–°—Ç–∞–Ω–æ–∫ –í", Kap_Tag: 10, verf_von: 45000, verf_bis: 46000}
    ];

    window.simulation.auftraege = [
        {auftrag_nr: "A001", Anzahl: 100, Start: 45000},
        {auftrag_nr: "A002", Anzahl: 50, Start: 45001},
        {auftrag_nr: "A003", Anzahl: 75, Start: 45002}
    ];

    window.simulation.arbeitsplaene = [
        {auftrag_nr: "A001", maschine: 1, dauer: 16, reihenfolge: 1},
        {auftrag_nr: "A001", maschine: 2, dauer: 12, reihenfolge: 2},
        {auftrag_nr: "A002", maschine: 2, dauer: 10, reihenfolge: 1},
        {auftrag_nr: "A002", maschine: 3, dauer: 8, reihenfolge: 2},
        {auftrag_nr: "A003", maschine: 1, dauer: 20, reihenfolge: 1}
    ];

    initMaschinen(window.simulation.maschinen);
    filterAndLoadActiveAuftraege();
    initAuftraegeStatus();
    addActivity("–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã");
}

function startSimulation() {
    console.log("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏");
    if (window.simulation.isRunning) return;

    window.simulation.isRunning = true;
    window.simulation.startTime = Date.now();
    window.simulation.timer = setInterval(simulationStep, window.simulation.intervalMs);

    addActivity("–°–∏–º—É–ª—è—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞");
    startAnimation();
}

function stopSimulation() {
    console.log("‚è∏Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏");
    window.simulation.isRunning = false;
    clearInterval(window.simulation.timer);

    addActivity("–°–∏–º—É–ª—è—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");
    stopAnimation();
    draw(); // –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞
}

async function resetSimulation() {
    console.log("üîÑ –°–±—Ä–æ—Å —Å–∏–º—É–ª—è—Ü–∏–∏");
    stopSimulation();

    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏–º—É–ª—è—Ü–∏–∏
    window.simulation.currentTimeMinutes = 45000 * 24 * 60;

    window.simulation.activeTasks = [];
    window.simulation.auftraegeQueue = [];
    window.simulation.maschinenStatus = {};
    window.simulation.auftraegeStatus = {};
    window.simulation.recentActivities = [];
    window.simulation.startTime = null;
    window.simulation.statistics = {
        completedTasks: 0,
        totalProcessingTime: 0,
        machineUtilization: {}
    };

    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    await loadInitialData();
    addActivity("–°–∏–º—É–ª—è—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞");

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    draw();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–∏–º—É–ª—è—Ü–∏–∏
function getCurrentSimulationSpeed() {
    return window.simulation.simulationMinutesPerStep || 1;
}

function getCurrentDay() {
    return Math.floor(window.simulation.currentTimeMinutes / (24 * 60));
}


function simulationStep() {
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
    window.simulation.currentTimeMinutes += getCurrentSimulationSpeed();

    console.log(`üìÖ Tag ${getCurrentDay()}: Simulationsschritt gestartet`);

    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
    window.simulation.activeTasks = window.simulation.activeTasks.filter(task => {
        const maschine = window.simulation.maschinenStatus[task.maschine];
        if (!maschine) {
            console.warn(`‚ö†Ô∏è –ú–∞—à–∏–Ω–∞ ${task.maschine} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!`);
            return false;
        }

        // –í—ã—á–∏—Å–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–∏–º—É–ª—è—Ü–∏–∏ –ø—Ä–æ—à–ª–æ –∑–∞ –æ–¥–∏–Ω —à–∞–≥
        // intervalMs –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É —à–∞–≥–∞–º–∏
        // –ù—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç —Å–∏–º—É–ª—è—Ü–∏–∏ –ø—Ä–æ—Ö–æ–¥–∏—Ç –∑–∞ —à–∞–≥
        const currentSpeed = getCurrentSimulationSpeed(); // –º–∏–Ω—É—Ç —Å–∏–º—É–ª—è—Ü–∏–∏ –∑–∞ —à–∞–≥

        task.remaining -= currentSpeed;
        console.log(`‚è≥ Auftrag ${task.auftrag_nr} –Ω–∞ Maschine ${task.maschine} hat noch ${Math.max(0, task.remaining)}h √ºbrig`);

        if (task.remaining <= 0) {
            // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –º–∞—à–∏–Ω—É
            maschine.frei = true;
            console.log(`‚úÖ Auftrag ${task.auftrag_nr} –Ω–∞ Maschine ${task.maschine} abgeschlossen`);
            addActivity(`–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–∫–∞–∑–∞ ${task.auftrag_nr} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –Ω–∞ –º–∞—à–∏–Ω–µ ${task.maschine}`);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–∫–∞–∑–∞ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
            const auftragStatus = window.simulation.auftraegeStatus[task.auftrag_nr];
            if (auftragStatus) {
                auftragStatus.currentStep++;
                auftragStatus.waiting = false;

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –≤–µ—Å—å –∑–∞–∫–∞–∑
                if (auftragStatus.currentStep >= auftragStatus.arbeitsplaene.length) {
                    auftragStatus.completed = true;
                    console.log(`üéâ –ó–∞–∫–∞–∑ ${task.auftrag_nr} –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω!`);
                    addActivity(`–ó–∞–∫–∞–∑ ${task.auftrag_nr} –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω`);
                    window.simulation.statistics.completedTasks++;
                }
            }

            return false; // –£–¥–∞–ª—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
        }
        return true;
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
    const newAuftraege = window.simulation.auftraege.filter(auftrag =>
        auftrag.Start === getCurrentDay() &&
        !window.simulation.auftraegeQueue.find(existing => existing.auftrag_nr === auftrag.auftrag_nr)
    );

    if (newAuftraege.length > 0) {
        window.simulation.auftraegeQueue.push(...newAuftraege);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        for (const auftrag of newAuftraege) {
            const arbeitsplaene = getArbeitsplaeneFor(auftrag.auftrag_nr)
                .sort((a, b) => a.reihenfolge - b.reihenfolge);

            window.simulation.auftraegeStatus[auftrag.auftrag_nr] = {
                currentStep: 0,
                arbeitsplaene: arbeitsplaene,
                completed: false,
                waiting: false
            };
        }

        console.log(`üì• –î–æ–±–∞–≤–ª–µ–Ω–æ ${newAuftraege.length} –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –≤ –æ—á–µ—Ä–µ–¥—å`);
        addActivity(`–î–æ–±–∞–≤–ª–µ–Ω–æ ${newAuftraege.length} –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤`);
    }

    // –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞
    for (const auftrag of window.simulation.auftraegeQueue) {
        const auftragStatus = window.simulation.auftraegeStatus[auftrag.auftrag_nr];

        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
        if (!auftragStatus || auftragStatus.completed) continue;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞
        const hasActiveTask = window.simulation.activeTasks.some(task => task.auftrag_nr === auftrag.auftrag_nr);
        if (hasActiveTask) continue;

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        const currentOperation = auftragStatus.arbeitsplaene[auftragStatus.currentStep];
        if (!currentOperation) continue;

        const machineId = currentOperation.maschine;
        const machine = window.simulation.maschinenStatus[machineId];

        if (machine && machine.frei && machine.verfuegbar) {
            // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
            machine.frei = false;
            window.simulation.activeTasks.push({
                auftrag_nr: auftrag.auftrag_nr,
                maschine: machineId,
                remaining: currentOperation.dauer * 60,
                operation: auftragStatus.currentStep + 1 // –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            });

            console.log(`üöÄ Starte Auftrag ${auftrag.auftrag_nr} Schritt ${auftragStatus.currentStep + 1} auf Maschine ${machineId} (Dauer: ${currentOperation.dauer}h)`);
            addActivity(`–ó–∞–ø—É—â–µ–Ω –∑–∞–∫–∞–∑ ${auftrag.auftrag_nr} (—à–∞–≥ ${auftragStatus.currentStep + 1}) –Ω–∞ –º–∞—à–∏–Ω–µ ${machineId}`);
        } else if (machine && !machine.frei) {
            // –ú–∞—à–∏–Ω–∞ –∑–∞–Ω—è—Ç–∞ - –∑–∞–∫–∞–∑ –∂–¥–µ—Ç
            if (!auftragStatus.waiting) {
                auftragStatus.waiting = true;
                console.log(`‚è≥ –ó–∞–∫–∞–∑ ${auftrag.auftrag_nr} –∂–¥–µ—Ç –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –º–∞—à–∏–Ω—ã ${machineId}`);
                addActivity(`–ó–∞–∫–∞–∑ ${auftrag.auftrag_nr} –∂–¥–µ—Ç –º–∞—à–∏–Ω—É ${machineId}`);
            }
        }
    }

    // –£–¥–∞–ª—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    window.simulation.auftraegeQueue = window.simulation.auftraegeQueue.filter(auftrag => {
        const auftragStatus = window.simulation.auftraegeStatus[auftrag.auftrag_nr];
        return auftragStatus && !auftragStatus.completed;
    });

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–∞—à–∏–Ω
    updateMachineUtilization();

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–∏–º—É–ª—è—Ü–∏–∏
    if (window.simulation.activeTasks.length === 0 && window.simulation.auftraegeQueue.length === 0) {
        stopSimulation();
        addActivity("–í—Å–µ –∑–∞–∫–∞–∑—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã");
        console.log("üèÅ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - –≤—Å–µ –∑–∞–∫–∞–∑—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã");
    }

    console.log("–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:", window.simulation.activeTasks);
    console.log("–°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤:", window.simulation.auftraegeStatus);

    draw();
}

function initMaschinen(maschinen) {
    console.log("üè≠ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—à–∏–Ω...");
    window.simulation.maschinenStatus = {};
    window.simulation.statistics.machineUtilization = {};

    for (const m of maschinen) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –º–∞—à–∏–Ω–∞ –≤ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
        const isAvailable = getCurrentDay() >= m.verf_von && getCurrentDay() <= m.verf_bis;

        window.simulation.maschinenStatus[m.Nr] = {
            frei: isAvailable,
            kapTag: m.Kap_Tag,
            bezeichnung: m.Bezeichnung,
            verfuegbar: isAvailable
        };

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        window.simulation.statistics.machineUtilization[m.Nr] = {
            totalTime: 0,
            workingTime: 0,
            utilization: 0
        };

        console.log(`üîß –ú–∞—à–∏–Ω–∞ ${m.Nr} (${m.Bezeichnung}): ${isAvailable ? '–¥–æ—Å—Ç—É–ø–Ω–∞' : '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}`);
    }
}

function updateMachineUtilization() {
    Object.keys(window.simulation.maschinenStatus).forEach(machineId => {
        const machine = window.simulation.maschinenStatus[machineId];
        const utilization = window.simulation.statistics.machineUtilization[machineId];

        if (utilization) {
            utilization.totalTime++;

            if (!machine.frei) {
                utilization.workingTime++;
            }

            utilization.utilization = utilization.totalTime > 0 ?
                (utilization.workingTime / utilization.totalTime * 100).toFixed(1) : 0;
        }
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è
async function initialize() {
    await loadInitialData();
    draw(); // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
}

// Event listeners –¥–ª—è –∫–Ω–æ–ø–æ–∫ (–µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)
if (typeof document !== 'undefined') {
    document.addEventListener('DOMContentLoaded', () => {
        const speedSlider = document.getElementById("speedSlider");
        const startBtn = document.getElementById("startBtn");
        const stopBtn = document.getElementById("stopBtn");
        const resetBtn = document.getElementById("resetBtn");

        if (speedSlider) {
            speedSlider.addEventListener("change", (e) => {
                const value = parseInt(e.target.value);
                window.simulation.simulationMinutesPerStep = value;

                let timeLabel;
                if (value < 60) {
                    timeLabel = `${value} Min`;
                } else if (value < 1440) {
                    timeLabel = `${Math.floor(value / 60)} Std`;
                } else {
                    timeLabel = `${Math.floor(value / 1440)} Tag`;
                }

                console.log(`‚öôÔ∏è Simulationsgeschwindigkeit: ${timeLabel} pro Sekunde —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏`);
            });

        }

        if (startBtn) startBtn.addEventListener("click", startSimulation);
        if (stopBtn) stopBtn.addEventListener("click", stopSimulation);
        if (resetBtn) resetBtn.addEventListener("click", resetSimulation);
    });
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export {
    loadInitialData,
    getArbeitsplaeneFor,
    initialize,
    startSimulation,
    stopSimulation,
    resetSimulation,
    addActivity
};

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ (–µ—Å–ª–∏ –Ω–µ –≤ –º–æ–¥—É–ª—å–Ω–æ–π —Å—Ä–µ–¥–µ)
if (typeof window !== 'undefined') {
    initialize().catch(console.error);
}