import {draw} from "../ui/simulation/renderer.js";

export const simulation = {
    isRunning: false,
    currentDay: 45000,
    intervalMs: 60000,
    timer: 0,
    auftraegeQueue: [],  // Auftr√§ge, –æ–∂–∏–¥–∞—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    activeTasks: [],     // –ó–∞–ø—É—â–µ–Ω–Ω—ã–µ Arbeitsplan-–æ–ø–µ—Ä–∞—Ü–∏–∏
    maschinenStatus: {}, // { maschineNr: { frei: true/false, verbleibend: x } }
    // –î–æ–±–∞–≤–ª—è–µ–º –∫—ç—à –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
    auftraege: [],       // –í—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    maschinen: [],       // –í—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –º–∞—à–∏–Ω—ã
    arbeitsplaene: []    // –í—Å–µ —Ä–∞–±–æ—á–∏–µ –ø–ª–∞–Ω—ã
};
window.simulation = simulation;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async function loadInitialData() {
    try {
        console.log("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...");

        // –ï—Å–ª–∏ —ç—Ç–æ Electron –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º IPC –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        if (window.electronAPI) {
            simulation.auftraege = await window.electronAPI.getAuftraege();
            simulation.maschinen = await window.electronAPI.getMaschinen();
            simulation.arbeitsplaene = await window.electronAPI.getArbeitsplaene();
        } else {
            // –î–ª—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fetch API
            const [auftraegeRes, maschinenRes, arbeitsplaeneRes] = await Promise.all([
                fetch('/api/auftraege'),
                fetch('/api/maschinen'),
                fetch('/api/arbeitsplaene')
            ]);

            simulation.auftraege = await auftraegeRes.json();
            simulation.maschinen = await maschinenRes.json();
            simulation.arbeitsplaene = await arbeitsplaeneRes.json();
        }

        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${simulation.auftraege.length} –∑–∞–∫–∞–∑–æ–≤, ${simulation.maschinen.length} –º–∞—à–∏–Ω`);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—à–∏–Ω
        initMaschinen(simulation.maschinen);

        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Ç–µ–∫—É—â–µ–º—É –¥–Ω—é (–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã)
        filterAndLoadActiveAuftraege();

        console.log(`üìã –í –æ—á–µ—Ä–µ–¥–∏ ${simulation.auftraegeQueue.length} –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`);

    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:", error);
        // –ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        loadTestData();
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
function filterAndLoadActiveAuftraege() {
    simulation.auftraegeQueue = simulation.auftraege.filter(auftrag => {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –Ω–∞—á–∞—Ç—å—Å—è –¥–æ –∏–ª–∏ –≤ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
        return auftrag.Start <= simulation.currentDay;
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–±–æ—á–∏—Ö –ø–ª–∞–Ω–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
function getArbeitsplaeneFor(auftrag_nr) {
    return simulation.arbeitsplaene.filter(plan => plan.auftrag_nr === auftrag_nr);
}

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–ª—É—á–∞–π –ø—Ä–æ–±–ª–µ–º —Å –ë–î
function loadTestData() {
    console.log("üß™ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...");

    simulation.maschinen = [
        { Nr: 1, Bezeichnung: "–°—Ç–∞–Ω–æ–∫ –ê", Kap_Tag: 8, verf_von: 45000, verf_bis: 46000 },
        { Nr: 2, Bezeichnung: "–°—Ç–∞–Ω–æ–∫ –ë", Kap_Tag: 6, verf_von: 45000, verf_bis: 46000 },
        { Nr: 3, Bezeichnung: "–°—Ç–∞–Ω–æ–∫ –í", Kap_Tag: 10, verf_von: 45000, verf_bis: 46000 }
    ];

    simulation.auftraege = [
        { auftrag_nr: "A001", Anzahl: 100, Start: 45000 },
        { auftrag_nr: "A002", Anzahl: 50, Start: 45001 },
        { auftrag_nr: "A003", Anzahl: 75, Start: 45002 }
    ];

    simulation.arbeitsplaene = [
        { auftrag_nr: "A001", maschine: 1, dauer: 16, reihenfolge: 1 },
        { auftrag_nr: "A001", maschine: 2, dauer: 12, reihenfolge: 2 },
        { auftrag_nr: "A002", maschine: 2, dauer: 10, reihenfolge: 1 },
        { auftrag_nr: "A002", maschine: 3, dauer: 8, reihenfolge: 2 },
        { auftrag_nr: "A003", maschine: 1, dauer: 20, reihenfolge: 1 }
    ];

    initMaschinen(simulation.maschinen);
    filterAndLoadActiveAuftraege();
}

function startSimulation() {
    console.log("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏");
    if (simulation.isRunning) return;
    simulation.isRunning = true;
    simulation.timer = setInterval(simulationStep, simulation.intervalMs);
}

function stopSimulation() {
    console.log("‚è∏Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏");
    simulation.isRunning = false;
    clearInterval(simulation.timer);
}

async function resetSimulation() {
    console.log("üîÑ –°–±—Ä–æ—Å —Å–∏–º—É–ª—è—Ü–∏–∏");
    stopSimulation();
    simulation.currentDay = 45000;
    simulation.activeTasks = [];
    simulation.maschinenStatus = {};

    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    await loadInitialData();

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    draw();
}

function simulationStep() {
    simulation.currentDay++;
    console.log(`üìÖ Tag ${simulation.currentDay}: Simulationsschritt gestartet`);

    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
    simulation.activeTasks = simulation.activeTasks.filter(task => {
        const maschine = simulation.maschinenStatus[task.maschine];
        if (!maschine) {
            console.warn(`‚ö†Ô∏è –ú–∞—à–∏–Ω–∞ ${task.maschine} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!`);
            return false;
        }

        task.remaining -= maschine.kapTag;
        console.log(`‚è≥ Auftrag ${task.auftrag_nr} –Ω–∞ Maschine ${task.maschine} hat noch ${task.remaining}h √ºbrig`);

        if (task.remaining <= 0) {
            maschine.frei = true;
            console.log(`‚úÖ Auftrag ${task.auftrag_nr} –Ω–∞ Maschine ${task.maschine} abgeschlossen`);
            return false;
        }
        return true;
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
    const newAuftraege = simulation.auftraege.filter(auftrag =>
        auftrag.Start === simulation.currentDay &&
        !simulation.auftraegeQueue.find(existing => existing.auftrag_nr === auftrag.auftrag_nr)
    );

    if (newAuftraege.length > 0) {
        simulation.auftraegeQueue.push(...newAuftraege);
        console.log(`üì• –î–æ–±–∞–≤–ª–µ–Ω–æ ${newAuftraege.length} –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –≤ –æ—á–µ—Ä–µ–¥—å`);
    }

    // –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    for (const auftrag of simulation.auftraegeQueue) {
        const pl√§ne = getArbeitsplaeneFor(auftrag.auftrag_nr)
            .sort((a, b) => a.reihenfolge - b.reihenfolge); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ—Ä—è–¥–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

        for (const plan of pl√§ne) {
            const m = plan.maschine;
            if (simulation.maschinenStatus[m]?.frei) {
                simulation.maschinenStatus[m].frei = false;
                simulation.activeTasks.push({
                    auftrag_nr: auftrag.auftrag_nr,
                    maschine: m,
                    remaining: plan.dauer
                });
                console.log(`üöÄ Starte Auftrag ${auftrag.auftrag_nr} auf Maschine ${m} (Dauer: ${plan.dauer}h)`);
                break; // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
            }
        }
    }

    // –£–¥–∞–ª—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    simulation.auftraegeQueue = simulation.auftraegeQueue.filter(auftrag => {
        const pl√§ne = getArbeitsplaeneFor(auftrag.auftrag_nr);
        const hasActiveTasks = simulation.activeTasks.some(task => task.auftrag_nr === auftrag.auftrag_nr);
        const hasWaitingTasks = pl√§ne.some(plan =>
            !simulation.activeTasks.some(task =>
                task.auftrag_nr === auftrag.auftrag_nr && task.maschine === plan.maschine
            )
        );

        return hasActiveTasks || hasWaitingTasks;
    });

    draw();
}

function initMaschinen(maschinen) {
    console.log("üè≠ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—à–∏–Ω...");
    simulation.maschinenStatus = {};

    for (const m of maschinen) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –º–∞—à–∏–Ω–∞ –≤ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
        const isAvailable = simulation.currentDay >= m.verf_von && simulation.currentDay <= m.verf_bis;

        simulation.maschinenStatus[m.Nr] = {
            frei: isAvailable,
            kapTag: m.Kap_Tag,
            bezeichnung: m.Bezeichnung,
            verfuegbar: isAvailable
        };

        console.log(`üîß –ú–∞—à–∏–Ω–∞ ${m.Nr} (${m.Bezeichnung}): ${isAvailable ? '–¥–æ—Å—Ç—É–ø–Ω–∞' : '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}`);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è
async function initialize() {
    await loadInitialData();
    draw(); // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
}

// Event listeners
document.getElementById("speedSlider").addEventListener("change", (e) => {
    const value = parseInt(e.target.value);
    simulation.intervalMs = value * 1000;
    console.log(`‚öôÔ∏è Simulationsintervall auf ${value} Min (‚Üí ${simulation.intervalMs} ms) gesetzt`);

    if (simulation.isRunning) {
        stopSimulation();
        startSimulation();
    }
});

document.getElementById("startBtn").addEventListener("click", startSimulation);
document.getElementById("stopBtn").addEventListener("click", stopSimulation);
document.getElementById("resetBtn").addEventListener("click", resetSimulation);

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export {
    loadInitialData,
    getArbeitsplaeneFor,
    initialize,
    startSimulation,
    stopSimulation,
    resetSimulation
};

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
initialize().catch(console.error);