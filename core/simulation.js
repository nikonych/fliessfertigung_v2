// core/simulation.js
import {draw, startAnimation, stopAnimation} from "../ui/simulation/renderer.js";

function calculateDayFromDate(dateString) {
    const targetDate = new Date(dateString);
    const baseDate = new Date('2020-01-01');
    const diffTime = targetDate.getTime() - baseDate.getTime();
    const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
    return diffDays;
}


window.simulation = {
    simulationMinutesPerStep: 1,
    isRunning: false,
    currentTimeMinutes: calculateDayFromDate('2022-01-01') * 24 * 60,
    intervalMs: 1000,
    timer: null,
    auftraegeQueue: [],
    activeTasks: [],
    maschinenStatus: {},
    auftraege: [],
    maschinen: [],
    arbeitsplaene: [],
    recentActivities: [],
    startTime: null,
    auftraegeStatus: {},
    statistics: {
        completedTasks: 0,
        totalProcessingTime: 0,
        machineUtilization: {}
    }
};

function setSimulationStartDate(dateString) {
    const dayNumber = calculateDayFromDate(dateString);
    window.simulation.currentTimeMinutes = dayNumber * 24 * 60;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async function loadInitialData() {
    try {

        // –ï—Å–ª–∏ —ç—Ç–æ Electron –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º IPC –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        if (window.electronAPI) {
            window.simulation.auftraege = await window.electronAPI.getAuftraege();
            window.simulation.maschinen = await window.electronAPI.getMaschinen();
            window.simulation.arbeitsplaene = await window.electronAPI.getArbeitsplaene();
        } else {
            // –î–ª—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fetch API
            try {
                const [auftraegeRes, maschinenRes, arbeitsplaeneRes] = await Promise.all([
                    fetch('/api/auftraege'),
                    fetch('/api/maschinen'),
                    fetch('/api/arbeitsplaene')
                ]);

                window.simulation.auftraege = await auftraegeRes.json();
                window.simulation.maschinen = await maschinenRes.json();
                window.simulation.arbeitsplaene = await arbeitsplaeneRes.json();
            } catch (fetchError) {
                loadTestData();
                return;
            }
        }


        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—à–∏–Ω
        initMaschinen(window.simulation.maschinen);

        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Ç–µ–∫—É—â–µ–º—É –¥–Ω—é (–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã)
        filterAndLoadActiveAuftraege();

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
        initAuftraegeStatus();

        addActivity(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${window.simulation.auftraege.length} –∑–∞–∫–∞–∑–æ–≤ –∏ ${window.simulation.maschinen.length} –º–∞—à–∏–Ω`);

    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:", error);
        addActivity("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ");
        loadTestData();
    }
}

function addActivity(message) {
    const timestamp = new Date().toLocaleTimeString();
    window.simulation.recentActivities.push(`[${timestamp}] ${message}`);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–±—ã—Ç–∏–π
    if (window.simulation.recentActivities.length > 10) {
        window.simulation.recentActivities = window.simulation.recentActivities.slice(-10);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
function filterAndLoadActiveAuftraege() {
    window.simulation.auftraegeQueue = window.simulation.auftraege.filter(auftrag => {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –Ω–∞—á–∞—Ç—å—Å—è –¥–æ –∏–ª–∏ –≤ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
        return auftrag.Start <= getCurrentDay();
    });
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
function initAuftraegeStatus() {
    window.simulation.auftraegeStatus = {};

    for (const auftrag of window.simulation.auftraegeQueue) {
        const arbeitsplaene = getArbeitsplaeneFor(auftrag.auftrag_nr)
            .sort((a, b) => a.reihenfolge - b.reihenfolge);

        window.simulation.auftraegeStatus[auftrag.auftrag_nr] = {
            currentStep: 0, // –¢–µ–∫—É—â–∏–π —à–∞–≥ –≤ —Ä–∞–±–æ—á–µ–º –ø–ª–∞–Ω–µ
            arbeitsplaene: arbeitsplaene,
            completed: false,
            waiting: false, // –ñ–¥–µ—Ç –ª–∏ –∑–∞–∫–∞–∑ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –º–∞—à–∏–Ω—ã
            anzahl: auftrag.Anzahl || 1 // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        };
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–±–æ—á–∏—Ö –ø–ª–∞–Ω–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
function getArbeitsplaeneFor(auftrag_nr) {
    return window.simulation.arbeitsplaene.filter(plan => plan.auftrag_nr === auftrag_nr);
}

function calculateOperationDuration(auftrag, arbeitsplan) {
    const anzahl = auftrag.Anzahl || 1; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
    const dauerPerUnit = arbeitsplan.dauer || 0; // –í—Ä–µ–º—è –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö
    const totalDauer = anzahl * dauerPerUnit; // –û–±—â–µ–µ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏

    console.log(`üìä –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞ ${auftrag.auftrag_nr}: ${anzahl} —à—Ç √ó ${dauerPerUnit} –º–∏–Ω = ${totalDauer} –º–∏–Ω`);

    return totalDauer;
}

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–ª—É—á–∞–π –ø—Ä–æ–±–ª–µ–º —Å –ë–î
function loadTestData() {

    window.simulation.maschinen = [
        {Nr: 1, Bezeichnung: "–°—Ç–∞–Ω–æ–∫ –ê", Kap_Tag: 8, verf_von: "2022-01-01", verf_bis: "2023-12-31"},
        {Nr: 2, Bezeichnung: "–°—Ç–∞–Ω–æ–∫ –ë", Kap_Tag: 6, verf_von: "2022-01-01", verf_bis: "2023-12-31"},
        {Nr: 3, Bezeichnung: "–°—Ç–∞–Ω–æ–∫ –í", Kap_Tag: 10, verf_von: "2022-01-01", verf_bis: "2023-12-31"}
    ];

    window.simulation.auftraege = [
        {auftrag_nr: "A001", Anzahl: 100, Start: 45000},
        {auftrag_nr: "A002", Anzahl: 50, Start: 45001},
        {auftrag_nr: "A003", Anzahl: 75, Start: 45002}
    ];

    window.simulation.arbeitsplaene = [
        {auftrag_nr: "A001", maschine: 1, dauer: 16, reihenfolge: 1},
        {auftrag_nr: "A001", maschine: 2, dauer: 12, reihenfolge: 2},
        {auftrag_nr: "A002", maschine: 2, dauer: 10, reihenfolge: 1},
        {auftrag_nr: "A002", maschine: 3, dauer: 8, reihenfolge: 2},
        {auftrag_nr: "A003", maschine: 1, dauer: 20, reihenfolge: 1}
    ];

    initMaschinen(window.simulation.maschinen);
    filterAndLoadActiveAuftraege();
    initAuftraegeStatus();
    addActivity("–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã");
}

function startSimulation() {
    if (window.simulation.isRunning) return;

    window.simulation.isRunning = true;
    window.simulation.startTime = Date.now();
    window.simulation.timer = setInterval(simulationStep, window.simulation.intervalMs);

    addActivity("–°–∏–º—É–ª—è—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞");
    startAnimation();
}

function stopSimulation() {
    console.log("‚è∏Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏");
    window.simulation.isRunning = false;
    clearInterval(window.simulation.timer);

    addActivity("–°–∏–º—É–ª—è—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");
    stopAnimation();
    draw(); // –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞
}

async function resetSimulation() {
    console.log("üîÑ –°–±—Ä–æ—Å —Å–∏–º—É–ª—è—Ü–∏–∏");
    stopSimulation();

    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏–º—É–ª—è—Ü–∏–∏
    window.simulation.currentTimeMinutes = calculateDayFromDate('2022-01-01') * 24 * 60;

    window.simulation.activeTasks = [];
    window.simulation.auftraegeQueue = [];
    window.simulation.maschinenStatus = {};
    window.simulation.auftraegeStatus = {};
    window.simulation.recentActivities = [];
    window.simulation.startTime = null;
    window.simulation.statistics = {
        completedTasks: 0,
        totalProcessingTime: 0,
        machineUtilization: {}
    };

    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    await loadInitialData();
    addActivity("–°–∏–º—É–ª—è—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞");

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    draw();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–∏–º—É–ª—è—Ü–∏–∏
function getCurrentSimulationSpeed() {
    return window.simulation.simulationMinutesPerStep || 1;
}

function getCurrentDay() {
    return Math.floor(window.simulation.currentTimeMinutes / (24 * 60));
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–Ω—è —Å–∏–º—É–ª—è—Ü–∏–∏ –≤ –¥–∞—Ç—É
function getCurrentDate() {
    const dayNumber = getCurrentDay();
    // –ë–∞–∑–æ–≤–∞—è –¥–∞—Ç–∞ - 1 —è–Ω–≤–∞—Ä—è 2020 –≥–æ–¥–∞ (–¥–µ–Ω—å 0)
    const baseDate = new Date('2020-01-01');
    const currentDate = new Date(baseDate);
    currentDate.setDate(baseDate.getDate() + dayNumber);
    return currentDate;
}


// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–∞—à–∏–Ω—ã
function isMachineAvailable(machine) {
    const currentDate = getCurrentDate();

    let verfVon, verfBis;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ –∫–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã–µ
    if (typeof machine.verf_von === 'number' && typeof machine.verf_bis === 'number') {
        verfVon = excelToDate(machine.verf_von);
        verfBis = excelToDate(machine.verf_bis);

    } else {
        // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∏
        verfVon = new Date(machine.verf_von);
        verfBis = new Date(machine.verf_bis);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ª–∏ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª–∏—Å—å –¥–∞—Ç—ã
        if (isNaN(verfVon.getTime()) || isNaN(verfBis.getTime())) {
            console.error(`‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç:`, machine.verf_von, machine.verf_bis);
            return false;
        }
    }

    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—ã (–±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏)
    const currentDateOnly = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate());
    const verfVonOnly = new Date(verfVon.getFullYear(), verfVon.getMonth(), verfVon.getDate());
    const verfBisOnly = new Date(verfBis.getFullYear(), verfBis.getMonth(), verfBis.getDate());

    const isAvailable = currentDateOnly >= verfVonOnly && currentDateOnly <= verfBisOnly;

    return isAvailable;
}

function excelToDate(serial) {
    // Excel —Å—á–∏—Ç–∞–µ—Ç –¥–Ω–∏ —Å 1 —è–Ω–≤–∞—Ä—è 1900, –Ω–æ –∏–º–µ–µ—Ç –æ—à–∏–±–∫—É —Å –≤–∏—Å–æ–∫–æ—Å–Ω—ã–º –≥–æ–¥–æ–º
    // –ü–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º 30 –¥–µ–∫–∞–±—Ä—è 1899 –∫–∞–∫ –±–∞–∑–æ–≤—É—é –¥–∞—Ç—É
    const excelEpoch = new Date(1899, 11, 30); // 30 –¥–µ–∫–∞–±—Ä—è 1899
    const date = new Date(excelEpoch.getTime() + serial * 86400 * 1000);
    return date; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º Date –æ–±—ä–µ–∫—Ç, –∞ –Ω–µ —Å—Ç—Ä–æ–∫—É
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –¥–Ω–µ (–≤ –º–∏–Ω—É—Ç–∞—Ö –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–Ω—è)
function getCurrentTimeInDay() {
    return window.simulation.currentTimeMinutes % (24 * 60);
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –º–∞—à–∏–Ω–∞ –≤ –¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
function isMachineWorkingTime(machine) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–∞—à–∏–Ω—ã –ø–æ –¥–∞—Ç–∞–º
    if (!isMachineAvailable(machine)) return false;

    const timeInDay = getCurrentTimeInDay();
    const workingHours = machine.Kap_Tag * 60; // –ü–µ—Ä–µ–≤–æ–¥–∏–º —á–∞—Å—ã –≤ –º–∏–Ω—É—Ç—ã

    // –†–∞–±–æ—á–∏–π –¥–µ–Ω—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤ 08:00 (480 –º–∏–Ω—É—Ç –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–Ω—è)
    const workStart = 8 * 60; // 08:00
    const workEnd = workStart + workingHours;

    const isWorkingTime = timeInDay >= workStart && timeInDay < workEnd;


    return isWorkingTime;
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –º–∞—à–∏–Ω–∞ –≤ –¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
function isMachineWorkingTimeAndAvailable(machine) {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–∞—à–∏–Ω—ã –ø–æ –¥–∞—Ç–∞–º
    if (!isMachineAvailable(machine)) return false;

    // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
    const timeInDay = getCurrentTimeInDay();
    const workingHours = machine.Kap_Tag * 60; // –ü–µ—Ä–µ–≤–æ–¥–∏–º —á–∞—Å—ã –≤ –º–∏–Ω—É—Ç—ã

    // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤ 08:00 (480 –º–∏–Ω—É—Ç –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–Ω—è)
    const workStart = 8 * 60; // 08:00
    const workEnd = workStart + workingHours;

    return timeInDay >= workStart && timeInDay < workEnd;
}

function simulationStep() {
    // –ü–æ–ª—É—á–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å —Å–∏–º—É–ª—è—Ü–∏–∏ (—Å–∫–æ–ª—å–∫–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –º–∏–Ω—É—Ç –∑–∞ –æ–¥–∏–Ω —à–∞–≥)
    const totalSpeed = getCurrentSimulationSpeed();

    // –†–∞–∑–±–∏–≤–∞–µ–º –±–æ–ª—å—à–∏–µ —à–∞–≥–∏ –Ω–∞ –±–æ–ª–µ–µ –º–µ–ª–∫–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
    const maxStepSize = 60; // –ú–∞–∫—Å–∏–º—É–º 1 —á–∞—Å –∑–∞ –æ–¥–∏–Ω –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —à–∞–≥
    let remainingTime = totalSpeed;

    while (remainingTime > 0) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
        const currentStepSize = Math.min(remainingTime, maxStepSize);

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ —Ç–µ–∫—É—â–∏–π —à–∞–≥
        window.simulation.currentTimeMinutes += currentStepSize;
        remainingTime -= currentStepSize;

        const currentDate = getCurrentDate();
        debugMachineStatus();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –¥–ª—è –≤—Å–µ—Ö –º–∞—à–∏–Ω
        Object.keys(window.simulation.maschinenStatus).forEach(machineId => {
            const machineStatus = window.simulation.maschinenStatus[machineId];
            const machineData = window.simulation.maschinen.find(m => m.Nr == machineId);

            if (!machineData) {
                console.warn(`‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –º–∞—à–∏–Ω—ã ${machineId} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!`);
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–∞—à–∏–Ω—ã –ø–æ –¥–∞—Ç–∞–º
            const isAvailable = isMachineAvailable(machineData);
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
            const isWorkingTime = isMachineWorkingTime(machineData);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –º–∞—à–∏–Ω—ã –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞
            const activeTask = window.simulation.activeTasks.find(task => task.maschine == machineId);
            const hasActiveTask = Boolean(activeTask);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –º–∞—à–∏–Ω—ã
            machineStatus.verfuegbar = isAvailable;
            machineStatus.hasUnfinishedTask = hasActiveTask;
            machineStatus.waitingForWorkingTime = hasActiveTask && isAvailable && !isWorkingTime;
            machineStatus.canStartNewTask = isAvailable && isWorkingTime && machineStatus.frei;

            // –õ–æ–≥–∏–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏/–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á
            if ((!isWorkingTime || !isAvailable) && hasActiveTask) {
                if (!activeTask.paused) {
                    activeTask.paused = true;
                    const reason = !isAvailable ? '–º–∞—à–∏–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞' : '–∫–æ–Ω–µ—Ü —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è';
                    addActivity(`–ú–∞—à–∏–Ω–∞ ${machineId} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (${reason})`);
                    console.log(`‚è∏Ô∏è –ú–∞—à–∏–Ω–∞ ${machineId} –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∞ —Ä–∞–±–æ—Ç—É: ${reason}`);
                }
            }
            // –ï—Å–ª–∏ –º–∞—à–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É
            else if (isWorkingTime && isAvailable && hasActiveTask) {
                if (activeTask.paused) {
                    activeTask.paused = false;
                    addActivity(`–ú–∞—à–∏–Ω–∞ ${machineId} –≤–æ–∑–æ–±–Ω–æ–≤–∏–ª–∞ —Ä–∞–±–æ—Ç—É`);
                    console.log(`‚ñ∂Ô∏è –ú–∞—à–∏–Ω–∞ ${machineId} –≤–æ–∑–æ–±–Ω–æ–≤–∏–ª–∞ —Ä–∞–±–æ—Ç—É`);
                }
            }
        });

        // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
        window.simulation.activeTasks = window.simulation.activeTasks.filter(task => {
            const maschine = window.simulation.maschinenStatus[task.maschine];
            if (!maschine) {
                console.warn(`‚ö†Ô∏è –ú–∞—à–∏–Ω–∞ ${task.maschine} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!`);
                return false;
            }

            // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (–º–∞—à–∏–Ω–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç), –Ω–µ —É–º–µ–Ω—å—à–∞–µ–º –≤—Ä–µ–º—è
            if (task.paused) {
                return true;
            }

            // –£–º–µ–Ω—å—à–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –∑–∞–¥–∞—á–∏ –Ω–∞ —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä —à–∞–≥–∞
            task.remaining -= currentStepSize;
            console.log(`‚è≥ Auftrag ${task.auftrag_nr} –Ω–∞ Maschine ${task.maschine} hat noch ${Math.max(0, task.remaining)}min √ºbrig (${task.anzahl} —à—Ç.)`);

            if (task.remaining <= 0) {
                // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –º–∞—à–∏–Ω—É
                maschine.frei = true;
                maschine.hasUnfinishedTask = false;
                maschine.waitingForWorkingTime = false;

                const machineData = window.simulation.maschinen.find(m => m.Nr == task.maschine);
                maschine.canStartNewTask = isMachineAvailable(machineData) && isMachineWorkingTime(machineData);

                console.log(`‚úÖ Auftrag ${task.auftrag_nr} –Ω–∞ Maschine ${task.maschine} abgeschlossen (${task.anzahl} —à—Ç. –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ)`);
                addActivity(`–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–∫–∞–∑–∞ ${task.auftrag_nr} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –Ω–∞ –º–∞—à–∏–Ω–µ ${task.maschine} (${task.anzahl} —à—Ç.)`);

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–∫–∞–∑–∞ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
                const auftragStatus = window.simulation.auftraegeStatus[task.auftrag_nr];
                if (auftragStatus) {
                    auftragStatus.currentStep++;
                    auftragStatus.waiting = false;

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –≤–µ—Å—å –∑–∞–∫–∞–∑
                    if (auftragStatus.currentStep >= auftragStatus.arbeitsplaene.length) {
                        auftragStatus.completed = true;
                        console.log(`üéâ –ó–∞–∫–∞–∑ ${task.auftrag_nr} –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω! (${auftragStatus.anzahl} —à—Ç.)`);
                        addActivity(`–ó–∞–∫–∞–∑ ${task.auftrag_nr} –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω (${auftragStatus.anzahl} —à—Ç.)`);
                        window.simulation.statistics.completedTasks++;
                    }
                }

                return false; // –£–¥–∞–ª—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
            }
            return true;
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
        const newAuftraege = window.simulation.auftraege.filter(auftrag =>
            auftrag.Start === getCurrentDay() &&
            !window.simulation.auftraegeQueue.find(existing => existing.auftrag_nr === auftrag.auftrag_nr)
        );

        if (newAuftraege.length > 0) {
            window.simulation.auftraegeQueue.push(...newAuftraege);

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤
            for (const auftrag of newAuftraege) {
                const arbeitsplaene = getArbeitsplaeneFor(auftrag.auftrag_nr)
                    .sort((a, b) => a.reihenfolge - b.reihenfolge);

                window.simulation.auftraegeStatus[auftrag.auftrag_nr] = {
                    currentStep: 0,
                    arbeitsplaene: arbeitsplaene,
                    completed: false,
                    waiting: false,
                    anzahl: auftrag.Anzahl || 1
                };
            }

            console.log(`üì• –î–æ–±–∞–≤–ª–µ–Ω–æ ${newAuftraege.length} –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –≤ –æ—á–µ—Ä–µ–¥—å`);
            addActivity(`–î–æ–±–∞–≤–ª–µ–Ω–æ ${newAuftraege.length} –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤`);
        }

        // –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
        for (const auftrag of window.simulation.auftraegeQueue) {
            const auftragStatus = window.simulation.auftraegeStatus[auftrag.auftrag_nr];

            if (!auftragStatus || auftragStatus.completed) continue;

            const hasActiveTask = window.simulation.activeTasks.some(task => task.auftrag_nr === auftrag.auftrag_nr);
            if (hasActiveTask) continue;

            const currentOperation = auftragStatus.arbeitsplaene[auftragStatus.currentStep];
            if (!currentOperation) continue;

            const machineId = currentOperation.maschine;
            const machineStatus = window.simulation.maschinenStatus[machineId];
            const machineData = window.simulation.maschinen.find(m => m.Nr == machineId);

            if (!machineStatus || !machineData) {
                console.warn(`‚ö†Ô∏è –ú–∞—à–∏–Ω–∞ ${machineId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!`);
                continue;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –º–∞—à–∏–Ω–∞ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
            const canStartTask = machineStatus.canStartNewTask;

            console.log(`üéØ –ó–∞–∫–∞–∑ ${auftrag.auftrag_nr} –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –º–∞—à–∏–Ω—É ${machineId}: —Å–≤–æ–±–æ–¥–Ω–∞=${machineStatus.frei}, –¥–æ—Å—Ç—É–ø–Ω–∞=${isMachineAvailable(machineData)}, —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è=${isMachineWorkingTime(machineData)}, –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å=${canStartTask}`);

            if (canStartTask) {
                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
                const totalDuration = calculateOperationDuration(auftrag, currentOperation);

                // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É
                machineStatus.frei = false;
                machineStatus.hasUnfinishedTask = true;
                machineStatus.canStartNewTask = false;
                machineStatus.waitingForWorkingTime = false;

                window.simulation.activeTasks.push({
                    auftrag_nr: auftrag.auftrag_nr,
                    maschine: machineId,
                    remaining: totalDuration,
                    operation: auftragStatus.currentStep + 1,
                    paused: false,
                    anzahl: auftrag.Anzahl || 1,
                    dauerPerUnit: currentOperation.dauer
                });

                console.log(`üöÄ Starte Auftrag ${auftrag.auftrag_nr} Schritt ${auftragStatus.currentStep + 1} auf Maschine ${machineId}`);
                console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${auftrag.Anzahl} —à—Ç., –≤—Ä–µ–º—è –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É: ${currentOperation.dauer} –º–∏–Ω, –æ–±—â–µ–µ –≤—Ä–µ–º—è: ${totalDuration} –º–∏–Ω`);
                addActivity(`–ó–∞–ø—É—â–µ–Ω –∑–∞–∫–∞–∑ ${auftrag.auftrag_nr} (—à–∞–≥ ${auftragStatus.currentStep + 1}) –Ω–∞ –º–∞—à–∏–Ω–µ ${machineId} - ${auftrag.Anzahl} —à—Ç.`);
            } else {
                // –ú–∞—à–∏–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∑–∞–¥–∞—á—É - –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–∏—á–∏–Ω—É
                if (!machineStatus.frei) {
                    if (!auftragStatus.waiting) {
                        auftragStatus.waiting = true;
                        console.log(`‚è≥ –ó–∞–∫–∞–∑ ${auftrag.auftrag_nr} –∂–¥–µ—Ç –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –º–∞—à–∏–Ω—ã ${machineId}`);
                        addActivity(`–ó–∞–∫–∞–∑ ${auftrag.auftrag_nr} –∂–¥–µ—Ç –º–∞—à–∏–Ω—É ${machineId}`);
                    }
                } else if (!isMachineAvailable(machineData)) {
                    if (!auftragStatus.waiting) {
                        auftragStatus.waiting = true;
                        console.log(`üìÖ –ó–∞–∫–∞–∑ ${auftrag.auftrag_nr} –∂–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–∞—à–∏–Ω—ã ${machineId}`);
                        addActivity(`–ó–∞–∫–∞–∑ ${auftrag.auftrag_nr} –∂–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–∞—à–∏–Ω—ã ${machineId}`);
                    }
                } else if (!isMachineWorkingTime(machineData)) {
                    if (!auftragStatus.waiting) {
                        auftragStatus.waiting = true;
                        console.log(`üïê –ó–∞–∫–∞–∑ ${auftrag.auftrag_nr} –∂–¥–µ—Ç –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –º–∞—à–∏–Ω—ã ${machineId}`);
                        addActivity(`–ó–∞–∫–∞–∑ ${auftrag.auftrag_nr} –∂–¥–µ—Ç —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –º–∞—à–∏–Ω—ã ${machineId}`);
                    }
                }
            }
        }

        // –£–¥–∞–ª—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        window.simulation.auftraegeQueue = window.simulation.auftraegeQueue.filter(auftrag => {
            const auftragStatus = window.simulation.auftraegeStatus[auftrag.auftrag_nr];
            return auftragStatus && !auftragStatus.completed;
        });

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–∞—à–∏–Ω
        updateMachineUtilization();

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–∏–º—É–ª—è—Ü–∏–∏
        if (window.simulation.activeTasks.length === 0 && window.simulation.auftraegeQueue.length === 0) {
            stopSimulation();
            addActivity("–í—Å–µ –∑–∞–∫–∞–∑—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã");
            console.log("üèÅ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - –≤—Å–µ –∑–∞–∫–∞–∑—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã");
            break; // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ while
        }
    }

    console.log("–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:", window.simulation.activeTasks);
    console.log("–°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤:", window.simulation.auftraegeStatus);

    draw();
}

function debugMachineStatus() {
    console.log("üîç === –û–¢–õ–ê–î–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø –ú–ê–®–ò–ù ===");
    const currentTime = getCurrentTimeInDay();
    const currentHour = Math.floor(currentTime / 60);
    const currentMinute = currentTime % 60;

    console.log(`‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Å–∏–º—É–ª—è—Ü–∏–∏: ${currentHour}:${String(currentMinute).padStart(2, '0')}`);

    Object.keys(window.simulation.maschinenStatus).forEach(machineId => {
        const status = window.simulation.maschinenStatus[machineId];
        const machineData = window.simulation.maschinen.find(m => m.Nr == machineId);

        if (machineData) {
            const isAvailable = isMachineAvailable(machineData);
            const isWorkingTime = isMachineWorkingTime(machineData);
            const workStart = 8;
            const workEnd = 8 + machineData.Kap_Tag;

            console.log(`  –ú–∞—à–∏–Ω–∞ ${machineId}:`);
            console.log(`    - –†–∞–±–æ—á–∏–µ —á–∞—Å—ã: ${workStart}:00 - ${workEnd}:00`);
            console.log(`    - –î–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –¥–∞—Ç–∞–º: ${isAvailable}`);
            console.log(`    - –í —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è: ${isWorkingTime}`);
            console.log(`    - –°–≤–æ–±–æ–¥–Ω–∞: ${status.frei}`);
            console.log(`    - –ú–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∑–∞–¥–∞—á—É: ${status.canStartNewTask}`);
        }
    });
    console.log("=================================");
}

function initMaschinen(maschinen) {
    console.log("üè≠ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—à–∏–Ω...");
    window.simulation.maschinenStatus = {};
    window.simulation.statistics.machineUtilization = {};

    for (const m of maschinen) {
        const isAvailable = isMachineAvailable(m);
        const isWorkingTime = isAvailable && isMachineWorkingTime(m);

        window.simulation.maschinenStatus[m.Nr] = {
            frei: true, // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤—Å–µ –º–∞—à–∏–Ω—ã —Å–≤–æ–±–æ–¥–Ω—ã
            kapTag: m.Kap_Tag,
            bezeichnung: m.Bezeichnung,
            verfuegbar: isAvailable,
            canStartNewTask: isWorkingTime,
            hasUnfinishedTask: false, // –ï—Å—Ç—å –ª–∏ –Ω–µ–∑–∞–∫–æ–Ω—á–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
            waitingForWorkingTime: false // –ñ–¥–µ—Ç –ª–∏ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –Ω–µ–∑–∞–∫–æ–Ω—á–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ–π
        };

        window.simulation.statistics.machineUtilization[m.Nr] = {
            totalTime: 0,
            workingTime: 0,
            availableTime: 0,
            utilization: 0
        };

        const currentDate = getCurrentDate().toISOString().split('T')[0];
        const currentTime = `${Math.floor(getCurrentTimeInDay() / 60)}:${String(getCurrentTimeInDay() % 60).padStart(2, '0')}`;

        console.log(`üîß –ú–∞—à–∏–Ω–∞ ${m.Nr} (${m.Bezeichnung}): –¥–æ—Å—Ç—É–ø–Ω–∞=${isAvailable}, —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è=${isWorkingTime}, –¥–∞—Ç–∞=${currentDate}, –≤—Ä–µ–º—è=${currentTime}`);
    }
}

function updateMachineUtilization() {
    Object.keys(window.simulation.maschinenStatus).forEach(machineId => {
        const machine = window.simulation.maschinenStatus[machineId];
        const machineData = window.simulation.maschinen.find(m => m.Nr == machineId);
        const utilization = window.simulation.statistics.machineUtilization[machineId];

        if (utilization && machineData) {
            const isWorkingTime = isMachineWorkingTimeAndAvailable(machineData);

            if (isWorkingTime) {
                utilization.availableTime++;

                if (!machine.frei) {
                    utilization.workingTime++;
                }
            }

            utilization.totalTime++;

            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            utilization.utilization = utilization.availableTime > 0 ?
                (utilization.workingTime / utilization.availableTime * 100).toFixed(1) : 0;
        }
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è
async function initialize() {
    await loadInitialData();
    draw(); // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
}

// Event listeners –¥–ª—è –∫–Ω–æ–ø–æ–∫ (–µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)
if (typeof document !== 'undefined') {
    document.addEventListener('DOMContentLoaded', () => {
        const speedSlider = document.getElementById("speedSlider");
        const startBtn = document.getElementById("startBtn");
        const stopBtn = document.getElementById("stopBtn");
        const resetBtn = document.getElementById("resetBtn");

        if (speedSlider) {
            speedSlider.addEventListener("change", (e) => {
                const value = parseInt(e.target.value);
                window.simulation.simulationMinutesPerStep = value;

                let timeLabel;
                if (value < 60) {
                    timeLabel = `${value} Min`;
                } else if (value < 1440) {
                    timeLabel = `${Math.floor(value / 60)} Std`;
                } else {
                    timeLabel = `${Math.floor(value / 1440)} Tag`;
                }

                console.log(`‚öôÔ∏è Simulationsgeschwindigkeit: ${timeLabel} pro Sekunde —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏`);
            });

        }

        if (startBtn) startBtn.addEventListener("click", startSimulation);
        if (stopBtn) stopBtn.addEventListener("click", stopSimulation);
        if (resetBtn) resetBtn.addEventListener("click", resetSimulation);
    });
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export {
    loadInitialData,
    getArbeitsplaeneFor,
    initialize,
    startSimulation,
    stopSimulation,
    resetSimulation,
    addActivity,
    getCurrentTimeInDay,
    isMachineWorkingTime,
    getCurrentDate,
    isMachineAvailable,
    isMachineWorkingTimeAndAvailable
};

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ (–µ—Å–ª–∏ –Ω–µ –≤ –º–æ–¥—É–ª—å–Ω–æ–π —Å—Ä–µ–¥–µ)
if (typeof window !== 'undefined') {
    initialize().catch(console.error);
    window.isMachineAvailable = isMachineAvailable;
    window.isMachineWorkingTimeAndAvailable = isMachineWorkingTimeAndAvailable;
    window.isMachineWorkingTime = isMachineWorkingTime;
}